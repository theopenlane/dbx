directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateDatabaseInput is used for create Database object.
Input was generated by ent.
"""
input CreateDatabaseInput {
	"""
	the ID of the organization
	"""
	organizationID: String!
	"""
	the name to the database
	"""
	name: String!
	"""
	the geo location of the database
	"""
	geo: String
	"""
	the DSN to the database
	"""
	dsn: String!
	"""
	the auth token used to connect to the database
	"""
	token: String
	"""
	status of the database
	"""
	status: DatabaseDatabaseStatus
	"""
	provider of the database
	"""
	provider: DatabaseDatabaseProvider
	groupID: ID!
}
"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
	"""
	the name of the group in turso
	"""
	name: String!
	"""
	the description of the group
	"""
	description: String
	"""
	the primary of the group
	"""
	primaryLocation: String!
	"""
	the replica locations of the group
	"""
	locations: [String!]
	"""
	the auth token used to connect to the group
	"""
	token: String
	"""
	region the group
	"""
	region: GroupRegion
	databaseIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Database implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	the ID of the organization
	"""
	organizationID: String!
	"""
	the name to the database
	"""
	name: String!
	"""
	the geo location of the database
	"""
	geo: String
	"""
	the DSN to the database
	"""
	dsn: String!
	"""
	the ID of the group
	"""
	groupID: ID!
	"""
	status of the database
	"""
	status: DatabaseDatabaseStatus!
	"""
	provider of the database
	"""
	provider: DatabaseDatabaseProvider!
	group: Group!
}
"""
A connection to a list of items.
"""
type DatabaseConnection {
	"""
	A list of edges.
	"""
	edges: [DatabaseEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createDatabase mutation
"""
type DatabaseCreatePayload {
	"""
	Created database
	"""
	database: Database!
}
"""
DatabaseDatabaseProvider is enum for the field provider
"""
enum DatabaseDatabaseProvider @goModel(model: "github.com/theopenlane/dbx/pkg/enums.DatabaseProvider") {
	LOCAL
	TURSO
}
"""
DatabaseDatabaseStatus is enum for the field status
"""
enum DatabaseDatabaseStatus @goModel(model: "github.com/theopenlane/dbx/pkg/enums.DatabaseStatus") {
	ACTIVE
	CREATING
	DELETING
	DELETED
}
"""
Return response for deleteDatabase mutation
"""
type DatabaseDeletePayload {
	"""
	Deleted database ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type DatabaseEdge {
	"""
	The item at the end of the edge.
	"""
	node: Database
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
Ordering options for Database connections
"""
input DatabaseOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order Databases.
	"""
	field: DatabaseOrderField!
}
"""
Properties by which Database connections can be ordered.
"""
enum DatabaseOrderField {
	created_at
	updated_at
}
"""
Return response for updateDatabase mutation
"""
type DatabaseUpdatePayload {
	"""
	Updated database
	"""
	database: Database!
}
"""
DatabaseWhereInput is used for filtering Database objects.
Input was generated by ent.
"""
input DatabaseWhereInput {
	not: DatabaseWhereInput
	and: [DatabaseWhereInput!]
	or: [DatabaseWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	organization_id field predicates
	"""
	organizationID: String
	organizationIDNEQ: String
	organizationIDIn: [String!]
	organizationIDNotIn: [String!]
	organizationIDGT: String
	organizationIDGTE: String
	organizationIDLT: String
	organizationIDLTE: String
	organizationIDContains: String
	organizationIDHasPrefix: String
	organizationIDHasSuffix: String
	organizationIDEqualFold: String
	organizationIDContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	geo field predicates
	"""
	geo: String
	geoNEQ: String
	geoIn: [String!]
	geoNotIn: [String!]
	geoGT: String
	geoGTE: String
	geoLT: String
	geoLTE: String
	geoContains: String
	geoHasPrefix: String
	geoHasSuffix: String
	geoIsNil: Boolean
	geoNotNil: Boolean
	geoEqualFold: String
	geoContainsFold: String
	"""
	dsn field predicates
	"""
	dsn: String
	dsnNEQ: String
	dsnIn: [String!]
	dsnNotIn: [String!]
	dsnGT: String
	dsnGTE: String
	dsnLT: String
	dsnLTE: String
	dsnContains: String
	dsnHasPrefix: String
	dsnHasSuffix: String
	dsnEqualFold: String
	dsnContainsFold: String
	"""
	group_id field predicates
	"""
	groupID: ID
	groupIDNEQ: ID
	groupIDIn: [ID!]
	groupIDNotIn: [ID!]
	groupIDGT: ID
	groupIDGTE: ID
	groupIDLT: ID
	groupIDLTE: ID
	groupIDContains: ID
	groupIDHasPrefix: ID
	groupIDHasSuffix: ID
	groupIDEqualFold: ID
	groupIDContainsFold: ID
	"""
	status field predicates
	"""
	status: DatabaseDatabaseStatus
	statusNEQ: DatabaseDatabaseStatus
	statusIn: [DatabaseDatabaseStatus!]
	statusNotIn: [DatabaseDatabaseStatus!]
	"""
	provider field predicates
	"""
	provider: DatabaseDatabaseProvider
	providerNEQ: DatabaseDatabaseProvider
	providerIn: [DatabaseDatabaseProvider!]
	providerNotIn: [DatabaseDatabaseProvider!]
	"""
	group edge predicates
	"""
	hasGroup: Boolean
	hasGroupWith: [GroupWhereInput!]
}
type Group implements Node {
	id: ID!
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	deletedAt: Time
	deletedBy: String
	"""
	the name of the group in turso
	"""
	name: String!
	"""
	the description of the group
	"""
	description: String
	"""
	the primary of the group
	"""
	primaryLocation: String!
	"""
	the replica locations of the group
	"""
	locations: [String!]
	"""
	region the group
	"""
	region: GroupRegion!
	databases: [Database!]
}
"""
A connection to a list of items.
"""
type GroupConnection {
	"""
	A list of edges.
	"""
	edges: [GroupEdge]
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	Identifies the total count of items in the connection.
	"""
	totalCount: Int!
}
"""
Return response for createGroup mutation
"""
type GroupCreatePayload {
	"""
	Created group
	"""
	group: Group!
}
"""
Return response for deleteGroup mutation
"""
type GroupDeletePayload {
	"""
	Deleted group ID
	"""
	deletedID: ID!
}
"""
An edge in a connection.
"""
type GroupEdge {
	"""
	The item at the end of the edge.
	"""
	node: Group
	"""
	A cursor for use in pagination.
	"""
	cursor: Cursor!
}
"""
Ordering options for Group connections
"""
input GroupOrder {
	"""
	The ordering direction.
	"""
	direction: OrderDirection! = ASC
	"""
	The field by which to order Groups.
	"""
	field: GroupOrderField!
}
"""
Properties by which Group connections can be ordered.
"""
enum GroupOrderField {
	created_at
	updated_at
}
"""
GroupRegion is enum for the field region
"""
enum GroupRegion @goModel(model: "github.com/theopenlane/dbx/pkg/enums.Region") {
	AMER
	EMEA
	APAC
}
"""
Return response for updateGroup mutation
"""
type GroupUpdatePayload {
	"""
	Updated group
	"""
	group: Group!
}
"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
	not: GroupWhereInput
	and: [GroupWhereInput!]
	or: [GroupWhereInput!]
	"""
	id field predicates
	"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""
	created_at field predicates
	"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	createdAtIsNil: Boolean
	createdAtNotNil: Boolean
	"""
	updated_at field predicates
	"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	updatedAtIsNil: Boolean
	updatedAtNotNil: Boolean
	"""
	created_by field predicates
	"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""
	updated_by field predicates
	"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""
	deleted_at field predicates
	"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""
	deleted_by field predicates
	"""
	deletedBy: String
	deletedByNEQ: String
	deletedByIn: [String!]
	deletedByNotIn: [String!]
	deletedByGT: String
	deletedByGTE: String
	deletedByLT: String
	deletedByLTE: String
	deletedByContains: String
	deletedByHasPrefix: String
	deletedByHasSuffix: String
	deletedByIsNil: Boolean
	deletedByNotNil: Boolean
	deletedByEqualFold: String
	deletedByContainsFold: String
	"""
	name field predicates
	"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""
	description field predicates
	"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""
	primary_location field predicates
	"""
	primaryLocation: String
	primaryLocationNEQ: String
	primaryLocationIn: [String!]
	primaryLocationNotIn: [String!]
	primaryLocationGT: String
	primaryLocationGTE: String
	primaryLocationLT: String
	primaryLocationLTE: String
	primaryLocationContains: String
	primaryLocationHasPrefix: String
	primaryLocationHasSuffix: String
	primaryLocationEqualFold: String
	primaryLocationContainsFold: String
	"""
	region field predicates
	"""
	region: GroupRegion
	regionNEQ: GroupRegion
	regionIn: [GroupRegion!]
	regionNotIn: [GroupRegion!]
	"""
	databases edge predicates
	"""
	hasDatabases: Boolean
	hasDatabasesWith: [DatabaseWhereInput!]
}
"""
A valid JSON string.
"""
scalar JSON
type Mutation {
	"""
	Create a new database
	"""
	createDatabase(
		"""
		values of the database
		"""
		input: CreateDatabaseInput!
	): DatabaseCreatePayload!
	"""
	Update an existing database
	"""
	updateDatabase(
		"""
		Name of the database
		"""
		name: String!

		"""
		New values for the database
		"""
		input: UpdateDatabaseInput!
	): DatabaseUpdatePayload!
	"""
	Delete an existing database
	"""
	deleteDatabase(
		"""
		Name of the database
		"""
		name: String!
	): DatabaseDeletePayload!
	"""
	Create a new group
	"""
	createGroup(
		"""
		values of the group
		"""
		input: CreateGroupInput!
	): GroupCreatePayload!
	"""
	Update an existing group
	"""
	updateGroup(
		"""
		Name of the group
		"""
		name: String!

		"""
		New values for the group
		"""
		input: UpdateGroupInput!
	): GroupUpdatePayload!
	"""
	Delete an existing group
	"""
	deleteGroup(
		"""
		Name of the group
		"""
		name: String!
	): GroupDeletePayload!
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/theopenlane/dbx/internal/ent/generated.Noder") {
	"""
	The id of the object.
	"""
	id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
	"""
	Specifies an ascending order for a given `orderBy` argument.
	"""
	ASC
	"""
	Specifies a descending order for a given `orderBy` argument.
	"""
	DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: Cursor
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: Cursor
}
type Query {
	"""
	Fetches an object given its ID.
	"""
	node(
		"""
		ID of the object.
		"""
		id: ID!
	): Node
	"""
	Lookup nodes by a list of IDs.
	"""
	nodes(
		"""
		The list of node IDs.
		"""
		ids: [ID!]!
	): [Node]!
	databases(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for Databases returned from the connection.
		"""
		orderBy: DatabaseOrder

		"""
		Filtering options for Databases returned from the connection.
		"""
		where: DatabaseWhereInput
	): DatabaseConnection!
	groups(
		"""
		Returns the elements in the list that come after the specified cursor.
		"""
		after: Cursor

		"""
		Returns the first _n_ elements from the list.
		"""
		first: Int

		"""
		Returns the elements in the list that come before the specified cursor.
		"""
		before: Cursor

		"""
		Returns the last _n_ elements from the list.
		"""
		last: Int

		"""
		Ordering options for Groups returned from the connection.
		"""
		orderBy: GroupOrder

		"""
		Filtering options for Groups returned from the connection.
		"""
		where: GroupWhereInput
	): GroupConnection!
	"""
	Look up database by ID
	"""
	database(
		"""
		Name of the database
		"""
		name: String!
	): Database!
	"""
	Look up group by ID
	"""
	group(
		"""
		Name of the group
		"""
		name: String!
	): Group!
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateDatabaseInput is used for update Database object.
Input was generated by ent.
"""
input UpdateDatabaseInput {
	"""
	the ID of the organization
	"""
	organizationID: String
	"""
	the name to the database
	"""
	name: String
	"""
	the geo location of the database
	"""
	geo: String
	clearGeo: Boolean
	"""
	the DSN to the database
	"""
	dsn: String
	"""
	the auth token used to connect to the database
	"""
	token: String
	clearToken: Boolean
	"""
	status of the database
	"""
	status: DatabaseDatabaseStatus
	"""
	provider of the database
	"""
	provider: DatabaseDatabaseProvider
	groupID: ID
}
"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
	"""
	the name of the group in turso
	"""
	name: String
	"""
	the description of the group
	"""
	description: String
	clearDescription: Boolean
	"""
	the primary of the group
	"""
	primaryLocation: String
	"""
	the replica locations of the group
	"""
	locations: [String!]
	appendLocations: [String!]
	clearLocations: Boolean
	"""
	the auth token used to connect to the group
	"""
	token: String
	clearToken: Boolean
	"""
	region the group
	"""
	region: GroupRegion
	addDatabaseIDs: [ID!]
	removeDatabaseIDs: [ID!]
	clearDatabases: Boolean
}
