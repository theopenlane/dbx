// Code generated by ent, DO NOT EDIT.

package generated

import (
	"github.com/theopenlane/dbx/internal/ent/generated/database"
	"github.com/theopenlane/dbx/internal/ent/generated/group"
	"github.com/theopenlane/dbx/internal/ent/generated/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   database.Table,
			Columns: database.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: database.FieldID,
			},
		},
		Type: "Database",
		Fields: map[string]*sqlgraph.FieldSpec{
			database.FieldCreatedAt:      {Type: field.TypeTime, Column: database.FieldCreatedAt},
			database.FieldUpdatedAt:      {Type: field.TypeTime, Column: database.FieldUpdatedAt},
			database.FieldCreatedBy:      {Type: field.TypeString, Column: database.FieldCreatedBy},
			database.FieldUpdatedBy:      {Type: field.TypeString, Column: database.FieldUpdatedBy},
			database.FieldDeletedAt:      {Type: field.TypeTime, Column: database.FieldDeletedAt},
			database.FieldDeletedBy:      {Type: field.TypeString, Column: database.FieldDeletedBy},
			database.FieldMappingID:      {Type: field.TypeString, Column: database.FieldMappingID},
			database.FieldOrganizationID: {Type: field.TypeString, Column: database.FieldOrganizationID},
			database.FieldName:           {Type: field.TypeString, Column: database.FieldName},
			database.FieldGeo:            {Type: field.TypeString, Column: database.FieldGeo},
			database.FieldDsn:            {Type: field.TypeString, Column: database.FieldDsn},
			database.FieldGroupID:        {Type: field.TypeString, Column: database.FieldGroupID},
			database.FieldToken:          {Type: field.TypeString, Column: database.FieldToken},
			database.FieldStatus:         {Type: field.TypeEnum, Column: database.FieldStatus},
			database.FieldProvider:       {Type: field.TypeEnum, Column: database.FieldProvider},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   group.Table,
			Columns: group.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: group.FieldID,
			},
		},
		Type: "Group",
		Fields: map[string]*sqlgraph.FieldSpec{
			group.FieldCreatedAt:       {Type: field.TypeTime, Column: group.FieldCreatedAt},
			group.FieldUpdatedAt:       {Type: field.TypeTime, Column: group.FieldUpdatedAt},
			group.FieldCreatedBy:       {Type: field.TypeString, Column: group.FieldCreatedBy},
			group.FieldUpdatedBy:       {Type: field.TypeString, Column: group.FieldUpdatedBy},
			group.FieldMappingID:       {Type: field.TypeString, Column: group.FieldMappingID},
			group.FieldDeletedAt:       {Type: field.TypeTime, Column: group.FieldDeletedAt},
			group.FieldDeletedBy:       {Type: field.TypeString, Column: group.FieldDeletedBy},
			group.FieldName:            {Type: field.TypeString, Column: group.FieldName},
			group.FieldDescription:     {Type: field.TypeString, Column: group.FieldDescription},
			group.FieldPrimaryLocation: {Type: field.TypeString, Column: group.FieldPrimaryLocation},
			group.FieldLocations:       {Type: field.TypeJSON, Column: group.FieldLocations},
			group.FieldToken:           {Type: field.TypeString, Column: group.FieldToken},
			group.FieldRegion:          {Type: field.TypeEnum, Column: group.FieldRegion},
		},
	}
	graph.MustAddE(
		"group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   database.GroupTable,
			Columns: []string{database.GroupColumn},
			Bidi:    false,
		},
		"Database",
		"Group",
	)
	graph.MustAddE(
		"databases",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.DatabasesTable,
			Columns: []string{group.DatabasesColumn},
			Bidi:    false,
		},
		"Group",
		"Database",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (dq *DatabaseQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DatabaseQuery builder.
func (dq *DatabaseQuery) Filter() *DatabaseFilter {
	return &DatabaseFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DatabaseMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DatabaseMutation builder.
func (m *DatabaseMutation) Filter() *DatabaseFilter {
	return &DatabaseFilter{config: m.config, predicateAdder: m}
}

// DatabaseFilter provides a generic filtering capability at runtime for DatabaseQuery.
type DatabaseFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DatabaseFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *DatabaseFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(database.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *DatabaseFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(database.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *DatabaseFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(database.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *DatabaseFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(database.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *DatabaseFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(database.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *DatabaseFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(database.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *DatabaseFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(database.FieldDeletedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *DatabaseFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(database.FieldMappingID))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *DatabaseFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(database.FieldOrganizationID))
}

// WhereName applies the entql string predicate on the name field.
func (f *DatabaseFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(database.FieldName))
}

// WhereGeo applies the entql string predicate on the geo field.
func (f *DatabaseFilter) WhereGeo(p entql.StringP) {
	f.Where(p.Field(database.FieldGeo))
}

// WhereDsn applies the entql string predicate on the dsn field.
func (f *DatabaseFilter) WhereDsn(p entql.StringP) {
	f.Where(p.Field(database.FieldDsn))
}

// WhereGroupID applies the entql string predicate on the group_id field.
func (f *DatabaseFilter) WhereGroupID(p entql.StringP) {
	f.Where(p.Field(database.FieldGroupID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *DatabaseFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(database.FieldToken))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *DatabaseFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(database.FieldStatus))
}

// WhereProvider applies the entql string predicate on the provider field.
func (f *DatabaseFilter) WhereProvider(p entql.StringP) {
	f.Where(p.Field(database.FieldProvider))
}

// WhereHasGroup applies a predicate to check if query has an edge group.
func (f *DatabaseFilter) WhereHasGroup() {
	f.Where(entql.HasEdge("group"))
}

// WhereHasGroupWith applies a predicate to check if query has an edge group with a given conditions (other predicates).
func (f *DatabaseFilter) WhereHasGroupWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (gq *GroupQuery) addPredicate(pred func(s *sql.Selector)) {
	gq.predicates = append(gq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupQuery builder.
func (gq *GroupQuery) Filter() *GroupFilter {
	return &GroupFilter{config: gq.config, predicateAdder: gq}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupMutation builder.
func (m *GroupMutation) Filter() *GroupFilter {
	return &GroupFilter{config: m.config, predicateAdder: m}
}

// GroupFilter provides a generic filtering capability at runtime for GroupQuery.
type GroupFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(group.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(group.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(group.FieldUpdatedBy))
}

// WhereMappingID applies the entql string predicate on the mapping_id field.
func (f *GroupFilter) WhereMappingID(p entql.StringP) {
	f.Where(p.Field(group.FieldMappingID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(group.FieldDeletedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *GroupFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(group.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *GroupFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(group.FieldDescription))
}

// WherePrimaryLocation applies the entql string predicate on the primary_location field.
func (f *GroupFilter) WherePrimaryLocation(p entql.StringP) {
	f.Where(p.Field(group.FieldPrimaryLocation))
}

// WhereLocations applies the entql json.RawMessage predicate on the locations field.
func (f *GroupFilter) WhereLocations(p entql.BytesP) {
	f.Where(p.Field(group.FieldLocations))
}

// WhereToken applies the entql string predicate on the token field.
func (f *GroupFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(group.FieldToken))
}

// WhereRegion applies the entql string predicate on the region field.
func (f *GroupFilter) WhereRegion(p entql.StringP) {
	f.Where(p.Field(group.FieldRegion))
}

// WhereHasDatabases applies a predicate to check if query has an edge databases.
func (f *GroupFilter) WhereHasDatabases() {
	f.Where(entql.HasEdge("databases"))
}

// WhereHasDatabasesWith applies a predicate to check if query has an edge databases with a given conditions (other predicates).
func (f *GroupFilter) WhereHasDatabasesWith(preds ...predicate.Database) {
	f.Where(entql.HasEdgeWith("databases", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
