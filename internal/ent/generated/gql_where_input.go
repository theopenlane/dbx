// Code generated by ent, DO NOT EDIT.

package generated

import (
	"errors"
	"fmt"
	"time"

	"github.com/theopenlane/dbx/internal/ent/generated/database"
	"github.com/theopenlane/dbx/internal/ent/generated/group"
	"github.com/theopenlane/dbx/internal/ent/generated/predicate"
	"github.com/theopenlane/dbx/pkg/enums"
)

// DatabaseWhereInput represents a where input for filtering Database queries.
type DatabaseWhereInput struct {
	Predicates []predicate.Database  `json:"-"`
	Not        *DatabaseWhereInput   `json:"not,omitempty"`
	Or         []*DatabaseWhereInput `json:"or,omitempty"`
	And        []*DatabaseWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "organization_id" field predicates.
	OrganizationID             *string  `json:"organizationID,omitempty"`
	OrganizationIDNEQ          *string  `json:"organizationIDNEQ,omitempty"`
	OrganizationIDIn           []string `json:"organizationIDIn,omitempty"`
	OrganizationIDNotIn        []string `json:"organizationIDNotIn,omitempty"`
	OrganizationIDGT           *string  `json:"organizationIDGT,omitempty"`
	OrganizationIDGTE          *string  `json:"organizationIDGTE,omitempty"`
	OrganizationIDLT           *string  `json:"organizationIDLT,omitempty"`
	OrganizationIDLTE          *string  `json:"organizationIDLTE,omitempty"`
	OrganizationIDContains     *string  `json:"organizationIDContains,omitempty"`
	OrganizationIDHasPrefix    *string  `json:"organizationIDHasPrefix,omitempty"`
	OrganizationIDHasSuffix    *string  `json:"organizationIDHasSuffix,omitempty"`
	OrganizationIDEqualFold    *string  `json:"organizationIDEqualFold,omitempty"`
	OrganizationIDContainsFold *string  `json:"organizationIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "geo" field predicates.
	Geo             *string  `json:"geo,omitempty"`
	GeoNEQ          *string  `json:"geoNEQ,omitempty"`
	GeoIn           []string `json:"geoIn,omitempty"`
	GeoNotIn        []string `json:"geoNotIn,omitempty"`
	GeoGT           *string  `json:"geoGT,omitempty"`
	GeoGTE          *string  `json:"geoGTE,omitempty"`
	GeoLT           *string  `json:"geoLT,omitempty"`
	GeoLTE          *string  `json:"geoLTE,omitempty"`
	GeoContains     *string  `json:"geoContains,omitempty"`
	GeoHasPrefix    *string  `json:"geoHasPrefix,omitempty"`
	GeoHasSuffix    *string  `json:"geoHasSuffix,omitempty"`
	GeoIsNil        bool     `json:"geoIsNil,omitempty"`
	GeoNotNil       bool     `json:"geoNotNil,omitempty"`
	GeoEqualFold    *string  `json:"geoEqualFold,omitempty"`
	GeoContainsFold *string  `json:"geoContainsFold,omitempty"`

	// "dsn" field predicates.
	Dsn             *string  `json:"dsn,omitempty"`
	DsnNEQ          *string  `json:"dsnNEQ,omitempty"`
	DsnIn           []string `json:"dsnIn,omitempty"`
	DsnNotIn        []string `json:"dsnNotIn,omitempty"`
	DsnGT           *string  `json:"dsnGT,omitempty"`
	DsnGTE          *string  `json:"dsnGTE,omitempty"`
	DsnLT           *string  `json:"dsnLT,omitempty"`
	DsnLTE          *string  `json:"dsnLTE,omitempty"`
	DsnContains     *string  `json:"dsnContains,omitempty"`
	DsnHasPrefix    *string  `json:"dsnHasPrefix,omitempty"`
	DsnHasSuffix    *string  `json:"dsnHasSuffix,omitempty"`
	DsnEqualFold    *string  `json:"dsnEqualFold,omitempty"`
	DsnContainsFold *string  `json:"dsnContainsFold,omitempty"`

	// "group_id" field predicates.
	GroupID             *string  `json:"groupID,omitempty"`
	GroupIDNEQ          *string  `json:"groupIDNEQ,omitempty"`
	GroupIDIn           []string `json:"groupIDIn,omitempty"`
	GroupIDNotIn        []string `json:"groupIDNotIn,omitempty"`
	GroupIDGT           *string  `json:"groupIDGT,omitempty"`
	GroupIDGTE          *string  `json:"groupIDGTE,omitempty"`
	GroupIDLT           *string  `json:"groupIDLT,omitempty"`
	GroupIDLTE          *string  `json:"groupIDLTE,omitempty"`
	GroupIDContains     *string  `json:"groupIDContains,omitempty"`
	GroupIDHasPrefix    *string  `json:"groupIDHasPrefix,omitempty"`
	GroupIDHasSuffix    *string  `json:"groupIDHasSuffix,omitempty"`
	GroupIDEqualFold    *string  `json:"groupIDEqualFold,omitempty"`
	GroupIDContainsFold *string  `json:"groupIDContainsFold,omitempty"`

	// "token" field predicates.
	Token             *string  `json:"token,omitempty"`
	TokenNEQ          *string  `json:"tokenNEQ,omitempty"`
	TokenIn           []string `json:"tokenIn,omitempty"`
	TokenNotIn        []string `json:"tokenNotIn,omitempty"`
	TokenGT           *string  `json:"tokenGT,omitempty"`
	TokenGTE          *string  `json:"tokenGTE,omitempty"`
	TokenLT           *string  `json:"tokenLT,omitempty"`
	TokenLTE          *string  `json:"tokenLTE,omitempty"`
	TokenContains     *string  `json:"tokenContains,omitempty"`
	TokenHasPrefix    *string  `json:"tokenHasPrefix,omitempty"`
	TokenHasSuffix    *string  `json:"tokenHasSuffix,omitempty"`
	TokenIsNil        bool     `json:"tokenIsNil,omitempty"`
	TokenNotNil       bool     `json:"tokenNotNil,omitempty"`
	TokenEqualFold    *string  `json:"tokenEqualFold,omitempty"`
	TokenContainsFold *string  `json:"tokenContainsFold,omitempty"`

	// "status" field predicates.
	Status      *enums.DatabaseStatus  `json:"status,omitempty"`
	StatusNEQ   *enums.DatabaseStatus  `json:"statusNEQ,omitempty"`
	StatusIn    []enums.DatabaseStatus `json:"statusIn,omitempty"`
	StatusNotIn []enums.DatabaseStatus `json:"statusNotIn,omitempty"`

	// "provider" field predicates.
	Provider      *enums.DatabaseProvider  `json:"provider,omitempty"`
	ProviderNEQ   *enums.DatabaseProvider  `json:"providerNEQ,omitempty"`
	ProviderIn    []enums.DatabaseProvider `json:"providerIn,omitempty"`
	ProviderNotIn []enums.DatabaseProvider `json:"providerNotIn,omitempty"`

	// "group" edge predicates.
	HasGroup     *bool              `json:"hasGroup,omitempty"`
	HasGroupWith []*GroupWhereInput `json:"hasGroupWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *DatabaseWhereInput) AddPredicates(predicates ...predicate.Database) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the DatabaseWhereInput filter on the DatabaseQuery builder.
func (i *DatabaseWhereInput) Filter(q *DatabaseQuery) (*DatabaseQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyDatabaseWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyDatabaseWhereInput is returned in case the DatabaseWhereInput is empty.
var ErrEmptyDatabaseWhereInput = errors.New("generated: empty predicate DatabaseWhereInput")

// P returns a predicate for filtering databases.
// An error is returned if the input is empty or invalid.
func (i *DatabaseWhereInput) P() (predicate.Database, error) {
	var predicates []predicate.Database
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, database.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Database, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, database.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Database, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, database.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, database.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, database.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, database.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, database.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, database.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, database.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, database.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, database.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, database.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, database.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, database.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, database.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, database.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, database.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, database.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, database.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, database.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, database.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, database.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, database.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, database.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, database.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, database.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, database.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, database.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, database.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, database.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, database.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, database.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, database.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, database.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, database.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, database.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, database.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, database.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, database.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, database.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, database.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, database.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, database.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, database.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, database.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, database.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, database.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, database.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, database.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, database.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, database.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, database.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, database.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, database.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, database.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, database.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, database.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, database.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, database.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, database.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, database.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, database.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, database.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, database.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, database.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, database.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, database.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, database.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, database.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, database.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, database.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, database.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, database.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, database.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, database.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, database.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, database.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, database.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, database.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, database.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, database.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, database.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, database.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, database.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, database.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, database.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, database.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, database.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.OrganizationID != nil {
		predicates = append(predicates, database.OrganizationIDEQ(*i.OrganizationID))
	}
	if i.OrganizationIDNEQ != nil {
		predicates = append(predicates, database.OrganizationIDNEQ(*i.OrganizationIDNEQ))
	}
	if len(i.OrganizationIDIn) > 0 {
		predicates = append(predicates, database.OrganizationIDIn(i.OrganizationIDIn...))
	}
	if len(i.OrganizationIDNotIn) > 0 {
		predicates = append(predicates, database.OrganizationIDNotIn(i.OrganizationIDNotIn...))
	}
	if i.OrganizationIDGT != nil {
		predicates = append(predicates, database.OrganizationIDGT(*i.OrganizationIDGT))
	}
	if i.OrganizationIDGTE != nil {
		predicates = append(predicates, database.OrganizationIDGTE(*i.OrganizationIDGTE))
	}
	if i.OrganizationIDLT != nil {
		predicates = append(predicates, database.OrganizationIDLT(*i.OrganizationIDLT))
	}
	if i.OrganizationIDLTE != nil {
		predicates = append(predicates, database.OrganizationIDLTE(*i.OrganizationIDLTE))
	}
	if i.OrganizationIDContains != nil {
		predicates = append(predicates, database.OrganizationIDContains(*i.OrganizationIDContains))
	}
	if i.OrganizationIDHasPrefix != nil {
		predicates = append(predicates, database.OrganizationIDHasPrefix(*i.OrganizationIDHasPrefix))
	}
	if i.OrganizationIDHasSuffix != nil {
		predicates = append(predicates, database.OrganizationIDHasSuffix(*i.OrganizationIDHasSuffix))
	}
	if i.OrganizationIDEqualFold != nil {
		predicates = append(predicates, database.OrganizationIDEqualFold(*i.OrganizationIDEqualFold))
	}
	if i.OrganizationIDContainsFold != nil {
		predicates = append(predicates, database.OrganizationIDContainsFold(*i.OrganizationIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, database.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, database.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, database.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, database.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, database.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, database.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, database.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, database.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, database.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, database.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, database.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, database.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, database.NameContainsFold(*i.NameContainsFold))
	}
	if i.Geo != nil {
		predicates = append(predicates, database.GeoEQ(*i.Geo))
	}
	if i.GeoNEQ != nil {
		predicates = append(predicates, database.GeoNEQ(*i.GeoNEQ))
	}
	if len(i.GeoIn) > 0 {
		predicates = append(predicates, database.GeoIn(i.GeoIn...))
	}
	if len(i.GeoNotIn) > 0 {
		predicates = append(predicates, database.GeoNotIn(i.GeoNotIn...))
	}
	if i.GeoGT != nil {
		predicates = append(predicates, database.GeoGT(*i.GeoGT))
	}
	if i.GeoGTE != nil {
		predicates = append(predicates, database.GeoGTE(*i.GeoGTE))
	}
	if i.GeoLT != nil {
		predicates = append(predicates, database.GeoLT(*i.GeoLT))
	}
	if i.GeoLTE != nil {
		predicates = append(predicates, database.GeoLTE(*i.GeoLTE))
	}
	if i.GeoContains != nil {
		predicates = append(predicates, database.GeoContains(*i.GeoContains))
	}
	if i.GeoHasPrefix != nil {
		predicates = append(predicates, database.GeoHasPrefix(*i.GeoHasPrefix))
	}
	if i.GeoHasSuffix != nil {
		predicates = append(predicates, database.GeoHasSuffix(*i.GeoHasSuffix))
	}
	if i.GeoIsNil {
		predicates = append(predicates, database.GeoIsNil())
	}
	if i.GeoNotNil {
		predicates = append(predicates, database.GeoNotNil())
	}
	if i.GeoEqualFold != nil {
		predicates = append(predicates, database.GeoEqualFold(*i.GeoEqualFold))
	}
	if i.GeoContainsFold != nil {
		predicates = append(predicates, database.GeoContainsFold(*i.GeoContainsFold))
	}
	if i.Dsn != nil {
		predicates = append(predicates, database.DsnEQ(*i.Dsn))
	}
	if i.DsnNEQ != nil {
		predicates = append(predicates, database.DsnNEQ(*i.DsnNEQ))
	}
	if len(i.DsnIn) > 0 {
		predicates = append(predicates, database.DsnIn(i.DsnIn...))
	}
	if len(i.DsnNotIn) > 0 {
		predicates = append(predicates, database.DsnNotIn(i.DsnNotIn...))
	}
	if i.DsnGT != nil {
		predicates = append(predicates, database.DsnGT(*i.DsnGT))
	}
	if i.DsnGTE != nil {
		predicates = append(predicates, database.DsnGTE(*i.DsnGTE))
	}
	if i.DsnLT != nil {
		predicates = append(predicates, database.DsnLT(*i.DsnLT))
	}
	if i.DsnLTE != nil {
		predicates = append(predicates, database.DsnLTE(*i.DsnLTE))
	}
	if i.DsnContains != nil {
		predicates = append(predicates, database.DsnContains(*i.DsnContains))
	}
	if i.DsnHasPrefix != nil {
		predicates = append(predicates, database.DsnHasPrefix(*i.DsnHasPrefix))
	}
	if i.DsnHasSuffix != nil {
		predicates = append(predicates, database.DsnHasSuffix(*i.DsnHasSuffix))
	}
	if i.DsnEqualFold != nil {
		predicates = append(predicates, database.DsnEqualFold(*i.DsnEqualFold))
	}
	if i.DsnContainsFold != nil {
		predicates = append(predicates, database.DsnContainsFold(*i.DsnContainsFold))
	}
	if i.GroupID != nil {
		predicates = append(predicates, database.GroupIDEQ(*i.GroupID))
	}
	if i.GroupIDNEQ != nil {
		predicates = append(predicates, database.GroupIDNEQ(*i.GroupIDNEQ))
	}
	if len(i.GroupIDIn) > 0 {
		predicates = append(predicates, database.GroupIDIn(i.GroupIDIn...))
	}
	if len(i.GroupIDNotIn) > 0 {
		predicates = append(predicates, database.GroupIDNotIn(i.GroupIDNotIn...))
	}
	if i.GroupIDGT != nil {
		predicates = append(predicates, database.GroupIDGT(*i.GroupIDGT))
	}
	if i.GroupIDGTE != nil {
		predicates = append(predicates, database.GroupIDGTE(*i.GroupIDGTE))
	}
	if i.GroupIDLT != nil {
		predicates = append(predicates, database.GroupIDLT(*i.GroupIDLT))
	}
	if i.GroupIDLTE != nil {
		predicates = append(predicates, database.GroupIDLTE(*i.GroupIDLTE))
	}
	if i.GroupIDContains != nil {
		predicates = append(predicates, database.GroupIDContains(*i.GroupIDContains))
	}
	if i.GroupIDHasPrefix != nil {
		predicates = append(predicates, database.GroupIDHasPrefix(*i.GroupIDHasPrefix))
	}
	if i.GroupIDHasSuffix != nil {
		predicates = append(predicates, database.GroupIDHasSuffix(*i.GroupIDHasSuffix))
	}
	if i.GroupIDEqualFold != nil {
		predicates = append(predicates, database.GroupIDEqualFold(*i.GroupIDEqualFold))
	}
	if i.GroupIDContainsFold != nil {
		predicates = append(predicates, database.GroupIDContainsFold(*i.GroupIDContainsFold))
	}
	if i.Token != nil {
		predicates = append(predicates, database.TokenEQ(*i.Token))
	}
	if i.TokenNEQ != nil {
		predicates = append(predicates, database.TokenNEQ(*i.TokenNEQ))
	}
	if len(i.TokenIn) > 0 {
		predicates = append(predicates, database.TokenIn(i.TokenIn...))
	}
	if len(i.TokenNotIn) > 0 {
		predicates = append(predicates, database.TokenNotIn(i.TokenNotIn...))
	}
	if i.TokenGT != nil {
		predicates = append(predicates, database.TokenGT(*i.TokenGT))
	}
	if i.TokenGTE != nil {
		predicates = append(predicates, database.TokenGTE(*i.TokenGTE))
	}
	if i.TokenLT != nil {
		predicates = append(predicates, database.TokenLT(*i.TokenLT))
	}
	if i.TokenLTE != nil {
		predicates = append(predicates, database.TokenLTE(*i.TokenLTE))
	}
	if i.TokenContains != nil {
		predicates = append(predicates, database.TokenContains(*i.TokenContains))
	}
	if i.TokenHasPrefix != nil {
		predicates = append(predicates, database.TokenHasPrefix(*i.TokenHasPrefix))
	}
	if i.TokenHasSuffix != nil {
		predicates = append(predicates, database.TokenHasSuffix(*i.TokenHasSuffix))
	}
	if i.TokenIsNil {
		predicates = append(predicates, database.TokenIsNil())
	}
	if i.TokenNotNil {
		predicates = append(predicates, database.TokenNotNil())
	}
	if i.TokenEqualFold != nil {
		predicates = append(predicates, database.TokenEqualFold(*i.TokenEqualFold))
	}
	if i.TokenContainsFold != nil {
		predicates = append(predicates, database.TokenContainsFold(*i.TokenContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, database.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, database.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, database.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, database.StatusNotIn(i.StatusNotIn...))
	}
	if i.Provider != nil {
		predicates = append(predicates, database.ProviderEQ(*i.Provider))
	}
	if i.ProviderNEQ != nil {
		predicates = append(predicates, database.ProviderNEQ(*i.ProviderNEQ))
	}
	if len(i.ProviderIn) > 0 {
		predicates = append(predicates, database.ProviderIn(i.ProviderIn...))
	}
	if len(i.ProviderNotIn) > 0 {
		predicates = append(predicates, database.ProviderNotIn(i.ProviderNotIn...))
	}

	if i.HasGroup != nil {
		p := database.HasGroup()
		if !*i.HasGroup {
			p = database.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasGroupWith) > 0 {
		with := make([]predicate.Group, 0, len(i.HasGroupWith))
		for _, w := range i.HasGroupWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasGroupWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, database.HasGroupWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyDatabaseWhereInput
	case 1:
		return predicates[0], nil
	default:
		return database.And(predicates...), nil
	}
}

// GroupWhereInput represents a where input for filtering Group queries.
type GroupWhereInput struct {
	Predicates []predicate.Group  `json:"-"`
	Not        *GroupWhereInput   `json:"not,omitempty"`
	Or         []*GroupWhereInput `json:"or,omitempty"`
	And        []*GroupWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "created_by" field predicates.
	CreatedBy             *string  `json:"createdBy,omitempty"`
	CreatedByNEQ          *string  `json:"createdByNEQ,omitempty"`
	CreatedByIn           []string `json:"createdByIn,omitempty"`
	CreatedByNotIn        []string `json:"createdByNotIn,omitempty"`
	CreatedByGT           *string  `json:"createdByGT,omitempty"`
	CreatedByGTE          *string  `json:"createdByGTE,omitempty"`
	CreatedByLT           *string  `json:"createdByLT,omitempty"`
	CreatedByLTE          *string  `json:"createdByLTE,omitempty"`
	CreatedByContains     *string  `json:"createdByContains,omitempty"`
	CreatedByHasPrefix    *string  `json:"createdByHasPrefix,omitempty"`
	CreatedByHasSuffix    *string  `json:"createdByHasSuffix,omitempty"`
	CreatedByIsNil        bool     `json:"createdByIsNil,omitempty"`
	CreatedByNotNil       bool     `json:"createdByNotNil,omitempty"`
	CreatedByEqualFold    *string  `json:"createdByEqualFold,omitempty"`
	CreatedByContainsFold *string  `json:"createdByContainsFold,omitempty"`

	// "updated_by" field predicates.
	UpdatedBy             *string  `json:"updatedBy,omitempty"`
	UpdatedByNEQ          *string  `json:"updatedByNEQ,omitempty"`
	UpdatedByIn           []string `json:"updatedByIn,omitempty"`
	UpdatedByNotIn        []string `json:"updatedByNotIn,omitempty"`
	UpdatedByGT           *string  `json:"updatedByGT,omitempty"`
	UpdatedByGTE          *string  `json:"updatedByGTE,omitempty"`
	UpdatedByLT           *string  `json:"updatedByLT,omitempty"`
	UpdatedByLTE          *string  `json:"updatedByLTE,omitempty"`
	UpdatedByContains     *string  `json:"updatedByContains,omitempty"`
	UpdatedByHasPrefix    *string  `json:"updatedByHasPrefix,omitempty"`
	UpdatedByHasSuffix    *string  `json:"updatedByHasSuffix,omitempty"`
	UpdatedByIsNil        bool     `json:"updatedByIsNil,omitempty"`
	UpdatedByNotNil       bool     `json:"updatedByNotNil,omitempty"`
	UpdatedByEqualFold    *string  `json:"updatedByEqualFold,omitempty"`
	UpdatedByContainsFold *string  `json:"updatedByContainsFold,omitempty"`

	// "deleted_at" field predicates.
	DeletedAt       *time.Time  `json:"deletedAt,omitempty"`
	DeletedAtNEQ    *time.Time  `json:"deletedAtNEQ,omitempty"`
	DeletedAtIn     []time.Time `json:"deletedAtIn,omitempty"`
	DeletedAtNotIn  []time.Time `json:"deletedAtNotIn,omitempty"`
	DeletedAtGT     *time.Time  `json:"deletedAtGT,omitempty"`
	DeletedAtGTE    *time.Time  `json:"deletedAtGTE,omitempty"`
	DeletedAtLT     *time.Time  `json:"deletedAtLT,omitempty"`
	DeletedAtLTE    *time.Time  `json:"deletedAtLTE,omitempty"`
	DeletedAtIsNil  bool        `json:"deletedAtIsNil,omitempty"`
	DeletedAtNotNil bool        `json:"deletedAtNotNil,omitempty"`

	// "deleted_by" field predicates.
	DeletedBy             *string  `json:"deletedBy,omitempty"`
	DeletedByNEQ          *string  `json:"deletedByNEQ,omitempty"`
	DeletedByIn           []string `json:"deletedByIn,omitempty"`
	DeletedByNotIn        []string `json:"deletedByNotIn,omitempty"`
	DeletedByGT           *string  `json:"deletedByGT,omitempty"`
	DeletedByGTE          *string  `json:"deletedByGTE,omitempty"`
	DeletedByLT           *string  `json:"deletedByLT,omitempty"`
	DeletedByLTE          *string  `json:"deletedByLTE,omitempty"`
	DeletedByContains     *string  `json:"deletedByContains,omitempty"`
	DeletedByHasPrefix    *string  `json:"deletedByHasPrefix,omitempty"`
	DeletedByHasSuffix    *string  `json:"deletedByHasSuffix,omitempty"`
	DeletedByIsNil        bool     `json:"deletedByIsNil,omitempty"`
	DeletedByNotNil       bool     `json:"deletedByNotNil,omitempty"`
	DeletedByEqualFold    *string  `json:"deletedByEqualFold,omitempty"`
	DeletedByContainsFold *string  `json:"deletedByContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "primary_location" field predicates.
	PrimaryLocation             *string  `json:"primaryLocation,omitempty"`
	PrimaryLocationNEQ          *string  `json:"primaryLocationNEQ,omitempty"`
	PrimaryLocationIn           []string `json:"primaryLocationIn,omitempty"`
	PrimaryLocationNotIn        []string `json:"primaryLocationNotIn,omitempty"`
	PrimaryLocationGT           *string  `json:"primaryLocationGT,omitempty"`
	PrimaryLocationGTE          *string  `json:"primaryLocationGTE,omitempty"`
	PrimaryLocationLT           *string  `json:"primaryLocationLT,omitempty"`
	PrimaryLocationLTE          *string  `json:"primaryLocationLTE,omitempty"`
	PrimaryLocationContains     *string  `json:"primaryLocationContains,omitempty"`
	PrimaryLocationHasPrefix    *string  `json:"primaryLocationHasPrefix,omitempty"`
	PrimaryLocationHasSuffix    *string  `json:"primaryLocationHasSuffix,omitempty"`
	PrimaryLocationEqualFold    *string  `json:"primaryLocationEqualFold,omitempty"`
	PrimaryLocationContainsFold *string  `json:"primaryLocationContainsFold,omitempty"`

	// "token" field predicates.
	Token             *string  `json:"token,omitempty"`
	TokenNEQ          *string  `json:"tokenNEQ,omitempty"`
	TokenIn           []string `json:"tokenIn,omitempty"`
	TokenNotIn        []string `json:"tokenNotIn,omitempty"`
	TokenGT           *string  `json:"tokenGT,omitempty"`
	TokenGTE          *string  `json:"tokenGTE,omitempty"`
	TokenLT           *string  `json:"tokenLT,omitempty"`
	TokenLTE          *string  `json:"tokenLTE,omitempty"`
	TokenContains     *string  `json:"tokenContains,omitempty"`
	TokenHasPrefix    *string  `json:"tokenHasPrefix,omitempty"`
	TokenHasSuffix    *string  `json:"tokenHasSuffix,omitempty"`
	TokenIsNil        bool     `json:"tokenIsNil,omitempty"`
	TokenNotNil       bool     `json:"tokenNotNil,omitempty"`
	TokenEqualFold    *string  `json:"tokenEqualFold,omitempty"`
	TokenContainsFold *string  `json:"tokenContainsFold,omitempty"`

	// "region" field predicates.
	Region      *enums.Region  `json:"region,omitempty"`
	RegionNEQ   *enums.Region  `json:"regionNEQ,omitempty"`
	RegionIn    []enums.Region `json:"regionIn,omitempty"`
	RegionNotIn []enums.Region `json:"regionNotIn,omitempty"`

	// "databases" edge predicates.
	HasDatabases     *bool                 `json:"hasDatabases,omitempty"`
	HasDatabasesWith []*DatabaseWhereInput `json:"hasDatabasesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *GroupWhereInput) AddPredicates(predicates ...predicate.Group) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the GroupWhereInput filter on the GroupQuery builder.
func (i *GroupWhereInput) Filter(q *GroupQuery) (*GroupQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyGroupWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyGroupWhereInput is returned in case the GroupWhereInput is empty.
var ErrEmptyGroupWhereInput = errors.New("generated: empty predicate GroupWhereInput")

// P returns a predicate for filtering groups.
// An error is returned if the input is empty or invalid.
func (i *GroupWhereInput) P() (predicate.Group, error) {
	var predicates []predicate.Group
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, group.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Group, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, group.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Group, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, group.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, group.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, group.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, group.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, group.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, group.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, group.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, group.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, group.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, group.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, group.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, group.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, group.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, group.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, group.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, group.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, group.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, group.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, group.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, group.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, group.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, group.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, group.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, group.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, group.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, group.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, group.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, group.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, group.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, group.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, group.UpdatedAtNotNil())
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, group.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, group.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, group.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, group.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, group.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, group.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, group.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, group.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedByContains != nil {
		predicates = append(predicates, group.CreatedByContains(*i.CreatedByContains))
	}
	if i.CreatedByHasPrefix != nil {
		predicates = append(predicates, group.CreatedByHasPrefix(*i.CreatedByHasPrefix))
	}
	if i.CreatedByHasSuffix != nil {
		predicates = append(predicates, group.CreatedByHasSuffix(*i.CreatedByHasSuffix))
	}
	if i.CreatedByIsNil {
		predicates = append(predicates, group.CreatedByIsNil())
	}
	if i.CreatedByNotNil {
		predicates = append(predicates, group.CreatedByNotNil())
	}
	if i.CreatedByEqualFold != nil {
		predicates = append(predicates, group.CreatedByEqualFold(*i.CreatedByEqualFold))
	}
	if i.CreatedByContainsFold != nil {
		predicates = append(predicates, group.CreatedByContainsFold(*i.CreatedByContainsFold))
	}
	if i.UpdatedBy != nil {
		predicates = append(predicates, group.UpdatedByEQ(*i.UpdatedBy))
	}
	if i.UpdatedByNEQ != nil {
		predicates = append(predicates, group.UpdatedByNEQ(*i.UpdatedByNEQ))
	}
	if len(i.UpdatedByIn) > 0 {
		predicates = append(predicates, group.UpdatedByIn(i.UpdatedByIn...))
	}
	if len(i.UpdatedByNotIn) > 0 {
		predicates = append(predicates, group.UpdatedByNotIn(i.UpdatedByNotIn...))
	}
	if i.UpdatedByGT != nil {
		predicates = append(predicates, group.UpdatedByGT(*i.UpdatedByGT))
	}
	if i.UpdatedByGTE != nil {
		predicates = append(predicates, group.UpdatedByGTE(*i.UpdatedByGTE))
	}
	if i.UpdatedByLT != nil {
		predicates = append(predicates, group.UpdatedByLT(*i.UpdatedByLT))
	}
	if i.UpdatedByLTE != nil {
		predicates = append(predicates, group.UpdatedByLTE(*i.UpdatedByLTE))
	}
	if i.UpdatedByContains != nil {
		predicates = append(predicates, group.UpdatedByContains(*i.UpdatedByContains))
	}
	if i.UpdatedByHasPrefix != nil {
		predicates = append(predicates, group.UpdatedByHasPrefix(*i.UpdatedByHasPrefix))
	}
	if i.UpdatedByHasSuffix != nil {
		predicates = append(predicates, group.UpdatedByHasSuffix(*i.UpdatedByHasSuffix))
	}
	if i.UpdatedByIsNil {
		predicates = append(predicates, group.UpdatedByIsNil())
	}
	if i.UpdatedByNotNil {
		predicates = append(predicates, group.UpdatedByNotNil())
	}
	if i.UpdatedByEqualFold != nil {
		predicates = append(predicates, group.UpdatedByEqualFold(*i.UpdatedByEqualFold))
	}
	if i.UpdatedByContainsFold != nil {
		predicates = append(predicates, group.UpdatedByContainsFold(*i.UpdatedByContainsFold))
	}
	if i.DeletedAt != nil {
		predicates = append(predicates, group.DeletedAtEQ(*i.DeletedAt))
	}
	if i.DeletedAtNEQ != nil {
		predicates = append(predicates, group.DeletedAtNEQ(*i.DeletedAtNEQ))
	}
	if len(i.DeletedAtIn) > 0 {
		predicates = append(predicates, group.DeletedAtIn(i.DeletedAtIn...))
	}
	if len(i.DeletedAtNotIn) > 0 {
		predicates = append(predicates, group.DeletedAtNotIn(i.DeletedAtNotIn...))
	}
	if i.DeletedAtGT != nil {
		predicates = append(predicates, group.DeletedAtGT(*i.DeletedAtGT))
	}
	if i.DeletedAtGTE != nil {
		predicates = append(predicates, group.DeletedAtGTE(*i.DeletedAtGTE))
	}
	if i.DeletedAtLT != nil {
		predicates = append(predicates, group.DeletedAtLT(*i.DeletedAtLT))
	}
	if i.DeletedAtLTE != nil {
		predicates = append(predicates, group.DeletedAtLTE(*i.DeletedAtLTE))
	}
	if i.DeletedAtIsNil {
		predicates = append(predicates, group.DeletedAtIsNil())
	}
	if i.DeletedAtNotNil {
		predicates = append(predicates, group.DeletedAtNotNil())
	}
	if i.DeletedBy != nil {
		predicates = append(predicates, group.DeletedByEQ(*i.DeletedBy))
	}
	if i.DeletedByNEQ != nil {
		predicates = append(predicates, group.DeletedByNEQ(*i.DeletedByNEQ))
	}
	if len(i.DeletedByIn) > 0 {
		predicates = append(predicates, group.DeletedByIn(i.DeletedByIn...))
	}
	if len(i.DeletedByNotIn) > 0 {
		predicates = append(predicates, group.DeletedByNotIn(i.DeletedByNotIn...))
	}
	if i.DeletedByGT != nil {
		predicates = append(predicates, group.DeletedByGT(*i.DeletedByGT))
	}
	if i.DeletedByGTE != nil {
		predicates = append(predicates, group.DeletedByGTE(*i.DeletedByGTE))
	}
	if i.DeletedByLT != nil {
		predicates = append(predicates, group.DeletedByLT(*i.DeletedByLT))
	}
	if i.DeletedByLTE != nil {
		predicates = append(predicates, group.DeletedByLTE(*i.DeletedByLTE))
	}
	if i.DeletedByContains != nil {
		predicates = append(predicates, group.DeletedByContains(*i.DeletedByContains))
	}
	if i.DeletedByHasPrefix != nil {
		predicates = append(predicates, group.DeletedByHasPrefix(*i.DeletedByHasPrefix))
	}
	if i.DeletedByHasSuffix != nil {
		predicates = append(predicates, group.DeletedByHasSuffix(*i.DeletedByHasSuffix))
	}
	if i.DeletedByIsNil {
		predicates = append(predicates, group.DeletedByIsNil())
	}
	if i.DeletedByNotNil {
		predicates = append(predicates, group.DeletedByNotNil())
	}
	if i.DeletedByEqualFold != nil {
		predicates = append(predicates, group.DeletedByEqualFold(*i.DeletedByEqualFold))
	}
	if i.DeletedByContainsFold != nil {
		predicates = append(predicates, group.DeletedByContainsFold(*i.DeletedByContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, group.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, group.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, group.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, group.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, group.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, group.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, group.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, group.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, group.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, group.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, group.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, group.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, group.NameContainsFold(*i.NameContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, group.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, group.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, group.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, group.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, group.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, group.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, group.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, group.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, group.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, group.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, group.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, group.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, group.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, group.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, group.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.PrimaryLocation != nil {
		predicates = append(predicates, group.PrimaryLocationEQ(*i.PrimaryLocation))
	}
	if i.PrimaryLocationNEQ != nil {
		predicates = append(predicates, group.PrimaryLocationNEQ(*i.PrimaryLocationNEQ))
	}
	if len(i.PrimaryLocationIn) > 0 {
		predicates = append(predicates, group.PrimaryLocationIn(i.PrimaryLocationIn...))
	}
	if len(i.PrimaryLocationNotIn) > 0 {
		predicates = append(predicates, group.PrimaryLocationNotIn(i.PrimaryLocationNotIn...))
	}
	if i.PrimaryLocationGT != nil {
		predicates = append(predicates, group.PrimaryLocationGT(*i.PrimaryLocationGT))
	}
	if i.PrimaryLocationGTE != nil {
		predicates = append(predicates, group.PrimaryLocationGTE(*i.PrimaryLocationGTE))
	}
	if i.PrimaryLocationLT != nil {
		predicates = append(predicates, group.PrimaryLocationLT(*i.PrimaryLocationLT))
	}
	if i.PrimaryLocationLTE != nil {
		predicates = append(predicates, group.PrimaryLocationLTE(*i.PrimaryLocationLTE))
	}
	if i.PrimaryLocationContains != nil {
		predicates = append(predicates, group.PrimaryLocationContains(*i.PrimaryLocationContains))
	}
	if i.PrimaryLocationHasPrefix != nil {
		predicates = append(predicates, group.PrimaryLocationHasPrefix(*i.PrimaryLocationHasPrefix))
	}
	if i.PrimaryLocationHasSuffix != nil {
		predicates = append(predicates, group.PrimaryLocationHasSuffix(*i.PrimaryLocationHasSuffix))
	}
	if i.PrimaryLocationEqualFold != nil {
		predicates = append(predicates, group.PrimaryLocationEqualFold(*i.PrimaryLocationEqualFold))
	}
	if i.PrimaryLocationContainsFold != nil {
		predicates = append(predicates, group.PrimaryLocationContainsFold(*i.PrimaryLocationContainsFold))
	}
	if i.Token != nil {
		predicates = append(predicates, group.TokenEQ(*i.Token))
	}
	if i.TokenNEQ != nil {
		predicates = append(predicates, group.TokenNEQ(*i.TokenNEQ))
	}
	if len(i.TokenIn) > 0 {
		predicates = append(predicates, group.TokenIn(i.TokenIn...))
	}
	if len(i.TokenNotIn) > 0 {
		predicates = append(predicates, group.TokenNotIn(i.TokenNotIn...))
	}
	if i.TokenGT != nil {
		predicates = append(predicates, group.TokenGT(*i.TokenGT))
	}
	if i.TokenGTE != nil {
		predicates = append(predicates, group.TokenGTE(*i.TokenGTE))
	}
	if i.TokenLT != nil {
		predicates = append(predicates, group.TokenLT(*i.TokenLT))
	}
	if i.TokenLTE != nil {
		predicates = append(predicates, group.TokenLTE(*i.TokenLTE))
	}
	if i.TokenContains != nil {
		predicates = append(predicates, group.TokenContains(*i.TokenContains))
	}
	if i.TokenHasPrefix != nil {
		predicates = append(predicates, group.TokenHasPrefix(*i.TokenHasPrefix))
	}
	if i.TokenHasSuffix != nil {
		predicates = append(predicates, group.TokenHasSuffix(*i.TokenHasSuffix))
	}
	if i.TokenIsNil {
		predicates = append(predicates, group.TokenIsNil())
	}
	if i.TokenNotNil {
		predicates = append(predicates, group.TokenNotNil())
	}
	if i.TokenEqualFold != nil {
		predicates = append(predicates, group.TokenEqualFold(*i.TokenEqualFold))
	}
	if i.TokenContainsFold != nil {
		predicates = append(predicates, group.TokenContainsFold(*i.TokenContainsFold))
	}
	if i.Region != nil {
		predicates = append(predicates, group.RegionEQ(*i.Region))
	}
	if i.RegionNEQ != nil {
		predicates = append(predicates, group.RegionNEQ(*i.RegionNEQ))
	}
	if len(i.RegionIn) > 0 {
		predicates = append(predicates, group.RegionIn(i.RegionIn...))
	}
	if len(i.RegionNotIn) > 0 {
		predicates = append(predicates, group.RegionNotIn(i.RegionNotIn...))
	}

	if i.HasDatabases != nil {
		p := group.HasDatabases()
		if !*i.HasDatabases {
			p = group.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDatabasesWith) > 0 {
		with := make([]predicate.Database, 0, len(i.HasDatabasesWith))
		for _, w := range i.HasDatabasesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDatabasesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, group.HasDatabasesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyGroupWhereInput
	case 1:
		return predicates[0], nil
	default:
		return group.And(predicates...), nil
	}
}
