// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/dbx/internal/ent/generated/database"
	"github.com/theopenlane/dbx/internal/ent/generated/group"
	"github.com/theopenlane/dbx/internal/ent/generated/predicate"
	"github.com/theopenlane/dbx/pkg/enums"

	"github.com/theopenlane/dbx/internal/ent/generated/internal"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (gu *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GroupUpdate) SetUpdatedAt(t time.Time) *GroupUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (gu *GroupUpdate) ClearUpdatedAt() *GroupUpdate {
	gu.mutation.ClearUpdatedAt()
	return gu
}

// SetUpdatedBy sets the "updated_by" field.
func (gu *GroupUpdate) SetUpdatedBy(s string) *GroupUpdate {
	gu.mutation.SetUpdatedBy(s)
	return gu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableUpdatedBy(s *string) *GroupUpdate {
	if s != nil {
		gu.SetUpdatedBy(*s)
	}
	return gu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (gu *GroupUpdate) ClearUpdatedBy() *GroupUpdate {
	gu.mutation.ClearUpdatedBy()
	return gu
}

// SetDeletedAt sets the "deleted_at" field.
func (gu *GroupUpdate) SetDeletedAt(t time.Time) *GroupUpdate {
	gu.mutation.SetDeletedAt(t)
	return gu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDeletedAt(t *time.Time) *GroupUpdate {
	if t != nil {
		gu.SetDeletedAt(*t)
	}
	return gu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gu *GroupUpdate) ClearDeletedAt() *GroupUpdate {
	gu.mutation.ClearDeletedAt()
	return gu
}

// SetDeletedBy sets the "deleted_by" field.
func (gu *GroupUpdate) SetDeletedBy(s string) *GroupUpdate {
	gu.mutation.SetDeletedBy(s)
	return gu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDeletedBy(s *string) *GroupUpdate {
	if s != nil {
		gu.SetDeletedBy(*s)
	}
	return gu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (gu *GroupUpdate) ClearDeletedBy() *GroupUpdate {
	gu.mutation.ClearDeletedBy()
	return gu
}

// SetName sets the "name" field.
func (gu *GroupUpdate) SetName(s string) *GroupUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableName(s *string) *GroupUpdate {
	if s != nil {
		gu.SetName(*s)
	}
	return gu
}

// SetDescription sets the "description" field.
func (gu *GroupUpdate) SetDescription(s string) *GroupUpdate {
	gu.mutation.SetDescription(s)
	return gu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDescription(s *string) *GroupUpdate {
	if s != nil {
		gu.SetDescription(*s)
	}
	return gu
}

// ClearDescription clears the value of the "description" field.
func (gu *GroupUpdate) ClearDescription() *GroupUpdate {
	gu.mutation.ClearDescription()
	return gu
}

// SetPrimaryLocation sets the "primary_location" field.
func (gu *GroupUpdate) SetPrimaryLocation(s string) *GroupUpdate {
	gu.mutation.SetPrimaryLocation(s)
	return gu
}

// SetNillablePrimaryLocation sets the "primary_location" field if the given value is not nil.
func (gu *GroupUpdate) SetNillablePrimaryLocation(s *string) *GroupUpdate {
	if s != nil {
		gu.SetPrimaryLocation(*s)
	}
	return gu
}

// SetLocations sets the "locations" field.
func (gu *GroupUpdate) SetLocations(s []string) *GroupUpdate {
	gu.mutation.SetLocations(s)
	return gu
}

// AppendLocations appends s to the "locations" field.
func (gu *GroupUpdate) AppendLocations(s []string) *GroupUpdate {
	gu.mutation.AppendLocations(s)
	return gu
}

// ClearLocations clears the value of the "locations" field.
func (gu *GroupUpdate) ClearLocations() *GroupUpdate {
	gu.mutation.ClearLocations()
	return gu
}

// SetToken sets the "token" field.
func (gu *GroupUpdate) SetToken(s string) *GroupUpdate {
	gu.mutation.SetToken(s)
	return gu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableToken(s *string) *GroupUpdate {
	if s != nil {
		gu.SetToken(*s)
	}
	return gu
}

// ClearToken clears the value of the "token" field.
func (gu *GroupUpdate) ClearToken() *GroupUpdate {
	gu.mutation.ClearToken()
	return gu
}

// SetRegion sets the "region" field.
func (gu *GroupUpdate) SetRegion(e enums.Region) *GroupUpdate {
	gu.mutation.SetRegion(e)
	return gu
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableRegion(e *enums.Region) *GroupUpdate {
	if e != nil {
		gu.SetRegion(*e)
	}
	return gu
}

// AddDatabaseIDs adds the "databases" edge to the Database entity by IDs.
func (gu *GroupUpdate) AddDatabaseIDs(ids ...string) *GroupUpdate {
	gu.mutation.AddDatabaseIDs(ids...)
	return gu
}

// AddDatabases adds the "databases" edges to the Database entity.
func (gu *GroupUpdate) AddDatabases(d ...*Database) *GroupUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return gu.AddDatabaseIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (gu *GroupUpdate) Mutation() *GroupMutation {
	return gu.mutation
}

// ClearDatabases clears all "databases" edges to the Database entity.
func (gu *GroupUpdate) ClearDatabases() *GroupUpdate {
	gu.mutation.ClearDatabases()
	return gu
}

// RemoveDatabaseIDs removes the "databases" edge to Database entities by IDs.
func (gu *GroupUpdate) RemoveDatabaseIDs(ids ...string) *GroupUpdate {
	gu.mutation.RemoveDatabaseIDs(ids...)
	return gu
}

// RemoveDatabases removes "databases" edges to Database entities.
func (gu *GroupUpdate) RemoveDatabases(d ...*Database) *GroupUpdate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return gu.RemoveDatabaseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupUpdate) Save(ctx context.Context) (int, error) {
	if err := gu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GroupUpdate) defaults() error {
	if _, ok := gu.mutation.UpdatedAt(); !ok && !gu.mutation.UpdatedAtCleared() {
		if group.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized group.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := group.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gu *GroupUpdate) check() error {
	if v, ok := gu.mutation.Name(); ok {
		if err := group.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Group.name": %w`, err)}
		}
	}
	if v, ok := gu.mutation.PrimaryLocation(); ok {
		if err := group.PrimaryLocationValidator(v); err != nil {
			return &ValidationError{Name: "primary_location", err: fmt.Errorf(`generated: validator failed for field "Group.primary_location": %w`, err)}
		}
	}
	if v, ok := gu.mutation.Region(); ok {
		if err := group.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`generated: validator failed for field "Group.region": %w`, err)}
		}
	}
	return nil
}

func (gu *GroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeString))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if gu.mutation.CreatedAtCleared() {
		_spec.ClearField(group.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
	}
	if gu.mutation.UpdatedAtCleared() {
		_spec.ClearField(group.FieldUpdatedAt, field.TypeTime)
	}
	if gu.mutation.CreatedByCleared() {
		_spec.ClearField(group.FieldCreatedBy, field.TypeString)
	}
	if value, ok := gu.mutation.UpdatedBy(); ok {
		_spec.SetField(group.FieldUpdatedBy, field.TypeString, value)
	}
	if gu.mutation.UpdatedByCleared() {
		_spec.ClearField(group.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := gu.mutation.DeletedAt(); ok {
		_spec.SetField(group.FieldDeletedAt, field.TypeTime, value)
	}
	if gu.mutation.DeletedAtCleared() {
		_spec.ClearField(group.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := gu.mutation.DeletedBy(); ok {
		_spec.SetField(group.FieldDeletedBy, field.TypeString, value)
	}
	if gu.mutation.DeletedByCleared() {
		_spec.ClearField(group.FieldDeletedBy, field.TypeString)
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
	}
	if gu.mutation.DescriptionCleared() {
		_spec.ClearField(group.FieldDescription, field.TypeString)
	}
	if value, ok := gu.mutation.PrimaryLocation(); ok {
		_spec.SetField(group.FieldPrimaryLocation, field.TypeString, value)
	}
	if value, ok := gu.mutation.Locations(); ok {
		_spec.SetField(group.FieldLocations, field.TypeJSON, value)
	}
	if value, ok := gu.mutation.AppendedLocations(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, group.FieldLocations, value)
		})
	}
	if gu.mutation.LocationsCleared() {
		_spec.ClearField(group.FieldLocations, field.TypeJSON)
	}
	if value, ok := gu.mutation.Token(); ok {
		_spec.SetField(group.FieldToken, field.TypeString, value)
	}
	if gu.mutation.TokenCleared() {
		_spec.ClearField(group.FieldToken, field.TypeString)
	}
	if value, ok := gu.mutation.Region(); ok {
		_spec.SetField(group.FieldRegion, field.TypeEnum, value)
	}
	if gu.mutation.DatabasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.DatabasesTable,
			Columns: []string{group.DatabasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.Database
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedDatabasesIDs(); len(nodes) > 0 && !gu.mutation.DatabasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.DatabasesTable,
			Columns: []string{group.DatabasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.Database
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.DatabasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.DatabasesTable,
			Columns: []string{group.DatabasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeString),
			},
		}
		edge.Schema = gu.schemaConfig.Database
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = gu.schemaConfig.Group
	ctx = internal.NewSchemaConfigContext(ctx, gu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GroupUpdateOne) SetUpdatedAt(t time.Time) *GroupUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (guo *GroupUpdateOne) ClearUpdatedAt() *GroupUpdateOne {
	guo.mutation.ClearUpdatedAt()
	return guo
}

// SetUpdatedBy sets the "updated_by" field.
func (guo *GroupUpdateOne) SetUpdatedBy(s string) *GroupUpdateOne {
	guo.mutation.SetUpdatedBy(s)
	return guo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableUpdatedBy(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetUpdatedBy(*s)
	}
	return guo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (guo *GroupUpdateOne) ClearUpdatedBy() *GroupUpdateOne {
	guo.mutation.ClearUpdatedBy()
	return guo
}

// SetDeletedAt sets the "deleted_at" field.
func (guo *GroupUpdateOne) SetDeletedAt(t time.Time) *GroupUpdateOne {
	guo.mutation.SetDeletedAt(t)
	return guo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDeletedAt(t *time.Time) *GroupUpdateOne {
	if t != nil {
		guo.SetDeletedAt(*t)
	}
	return guo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (guo *GroupUpdateOne) ClearDeletedAt() *GroupUpdateOne {
	guo.mutation.ClearDeletedAt()
	return guo
}

// SetDeletedBy sets the "deleted_by" field.
func (guo *GroupUpdateOne) SetDeletedBy(s string) *GroupUpdateOne {
	guo.mutation.SetDeletedBy(s)
	return guo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDeletedBy(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetDeletedBy(*s)
	}
	return guo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (guo *GroupUpdateOne) ClearDeletedBy() *GroupUpdateOne {
	guo.mutation.ClearDeletedBy()
	return guo
}

// SetName sets the "name" field.
func (guo *GroupUpdateOne) SetName(s string) *GroupUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableName(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetName(*s)
	}
	return guo
}

// SetDescription sets the "description" field.
func (guo *GroupUpdateOne) SetDescription(s string) *GroupUpdateOne {
	guo.mutation.SetDescription(s)
	return guo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDescription(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetDescription(*s)
	}
	return guo
}

// ClearDescription clears the value of the "description" field.
func (guo *GroupUpdateOne) ClearDescription() *GroupUpdateOne {
	guo.mutation.ClearDescription()
	return guo
}

// SetPrimaryLocation sets the "primary_location" field.
func (guo *GroupUpdateOne) SetPrimaryLocation(s string) *GroupUpdateOne {
	guo.mutation.SetPrimaryLocation(s)
	return guo
}

// SetNillablePrimaryLocation sets the "primary_location" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillablePrimaryLocation(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetPrimaryLocation(*s)
	}
	return guo
}

// SetLocations sets the "locations" field.
func (guo *GroupUpdateOne) SetLocations(s []string) *GroupUpdateOne {
	guo.mutation.SetLocations(s)
	return guo
}

// AppendLocations appends s to the "locations" field.
func (guo *GroupUpdateOne) AppendLocations(s []string) *GroupUpdateOne {
	guo.mutation.AppendLocations(s)
	return guo
}

// ClearLocations clears the value of the "locations" field.
func (guo *GroupUpdateOne) ClearLocations() *GroupUpdateOne {
	guo.mutation.ClearLocations()
	return guo
}

// SetToken sets the "token" field.
func (guo *GroupUpdateOne) SetToken(s string) *GroupUpdateOne {
	guo.mutation.SetToken(s)
	return guo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableToken(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetToken(*s)
	}
	return guo
}

// ClearToken clears the value of the "token" field.
func (guo *GroupUpdateOne) ClearToken() *GroupUpdateOne {
	guo.mutation.ClearToken()
	return guo
}

// SetRegion sets the "region" field.
func (guo *GroupUpdateOne) SetRegion(e enums.Region) *GroupUpdateOne {
	guo.mutation.SetRegion(e)
	return guo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableRegion(e *enums.Region) *GroupUpdateOne {
	if e != nil {
		guo.SetRegion(*e)
	}
	return guo
}

// AddDatabaseIDs adds the "databases" edge to the Database entity by IDs.
func (guo *GroupUpdateOne) AddDatabaseIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.AddDatabaseIDs(ids...)
	return guo
}

// AddDatabases adds the "databases" edges to the Database entity.
func (guo *GroupUpdateOne) AddDatabases(d ...*Database) *GroupUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return guo.AddDatabaseIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (guo *GroupUpdateOne) Mutation() *GroupMutation {
	return guo.mutation
}

// ClearDatabases clears all "databases" edges to the Database entity.
func (guo *GroupUpdateOne) ClearDatabases() *GroupUpdateOne {
	guo.mutation.ClearDatabases()
	return guo
}

// RemoveDatabaseIDs removes the "databases" edge to Database entities by IDs.
func (guo *GroupUpdateOne) RemoveDatabaseIDs(ids ...string) *GroupUpdateOne {
	guo.mutation.RemoveDatabaseIDs(ids...)
	return guo
}

// RemoveDatabases removes "databases" edges to Database entities.
func (guo *GroupUpdateOne) RemoveDatabases(d ...*Database) *GroupUpdateOne {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return guo.RemoveDatabaseIDs(ids...)
}

// Where appends a list predicates to the GroupUpdate builder.
func (guo *GroupUpdateOne) Where(ps ...predicate.Group) *GroupUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Group entity.
func (guo *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	if err := guo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GroupUpdateOne) defaults() error {
	if _, ok := guo.mutation.UpdatedAt(); !ok && !guo.mutation.UpdatedAtCleared() {
		if group.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized group.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := group.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (guo *GroupUpdateOne) check() error {
	if v, ok := guo.mutation.Name(); ok {
		if err := group.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Group.name": %w`, err)}
		}
	}
	if v, ok := guo.mutation.PrimaryLocation(); ok {
		if err := group.PrimaryLocationValidator(v); err != nil {
			return &ValidationError{Name: "primary_location", err: fmt.Errorf(`generated: validator failed for field "Group.primary_location": %w`, err)}
		}
	}
	if v, ok := guo.mutation.Region(); ok {
		if err := group.RegionValidator(v); err != nil {
			return &ValidationError{Name: "region", err: fmt.Errorf(`generated: validator failed for field "Group.region": %w`, err)}
		}
	}
	return nil
}

func (guo *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeString))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if guo.mutation.CreatedAtCleared() {
		_spec.ClearField(group.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(group.FieldUpdatedAt, field.TypeTime, value)
	}
	if guo.mutation.UpdatedAtCleared() {
		_spec.ClearField(group.FieldUpdatedAt, field.TypeTime)
	}
	if guo.mutation.CreatedByCleared() {
		_spec.ClearField(group.FieldCreatedBy, field.TypeString)
	}
	if value, ok := guo.mutation.UpdatedBy(); ok {
		_spec.SetField(group.FieldUpdatedBy, field.TypeString, value)
	}
	if guo.mutation.UpdatedByCleared() {
		_spec.ClearField(group.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := guo.mutation.DeletedAt(); ok {
		_spec.SetField(group.FieldDeletedAt, field.TypeTime, value)
	}
	if guo.mutation.DeletedAtCleared() {
		_spec.ClearField(group.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := guo.mutation.DeletedBy(); ok {
		_spec.SetField(group.FieldDeletedBy, field.TypeString, value)
	}
	if guo.mutation.DeletedByCleared() {
		_spec.ClearField(group.FieldDeletedBy, field.TypeString)
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
	}
	if guo.mutation.DescriptionCleared() {
		_spec.ClearField(group.FieldDescription, field.TypeString)
	}
	if value, ok := guo.mutation.PrimaryLocation(); ok {
		_spec.SetField(group.FieldPrimaryLocation, field.TypeString, value)
	}
	if value, ok := guo.mutation.Locations(); ok {
		_spec.SetField(group.FieldLocations, field.TypeJSON, value)
	}
	if value, ok := guo.mutation.AppendedLocations(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, group.FieldLocations, value)
		})
	}
	if guo.mutation.LocationsCleared() {
		_spec.ClearField(group.FieldLocations, field.TypeJSON)
	}
	if value, ok := guo.mutation.Token(); ok {
		_spec.SetField(group.FieldToken, field.TypeString, value)
	}
	if guo.mutation.TokenCleared() {
		_spec.ClearField(group.FieldToken, field.TypeString)
	}
	if value, ok := guo.mutation.Region(); ok {
		_spec.SetField(group.FieldRegion, field.TypeEnum, value)
	}
	if guo.mutation.DatabasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.DatabasesTable,
			Columns: []string{group.DatabasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.Database
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedDatabasesIDs(); len(nodes) > 0 && !guo.mutation.DatabasesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.DatabasesTable,
			Columns: []string{group.DatabasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.Database
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.DatabasesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.DatabasesTable,
			Columns: []string{group.DatabasesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(database.FieldID, field.TypeString),
			},
		}
		edge.Schema = guo.schemaConfig.Database
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = guo.schemaConfig.Group
	ctx = internal.NewSchemaConfigContext(ctx, guo.schemaConfig)
	_node = &Group{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
