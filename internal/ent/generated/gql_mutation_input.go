// Code generated by ent, DO NOT EDIT.

package generated

import (
	"github.com/theopenlane/dbx/pkg/enums"
)

// CreateDatabaseInput represents a mutation input for creating databases.
type CreateDatabaseInput struct {
	OrganizationID string
	Name           string
	Geo            *string
	Dsn            string
	Token          *string
	Status         *enums.DatabaseStatus
	Provider       *enums.DatabaseProvider
	GroupID        string
}

// Mutate applies the CreateDatabaseInput on the DatabaseMutation builder.
func (i *CreateDatabaseInput) Mutate(m *DatabaseMutation) {
	m.SetOrganizationID(i.OrganizationID)
	m.SetName(i.Name)
	if v := i.Geo; v != nil {
		m.SetGeo(*v)
	}
	m.SetDsn(i.Dsn)
	if v := i.Token; v != nil {
		m.SetToken(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Provider; v != nil {
		m.SetProvider(*v)
	}
	m.SetGroupID(i.GroupID)
}

// SetInput applies the change-set in the CreateDatabaseInput on the DatabaseCreate builder.
func (c *DatabaseCreate) SetInput(i CreateDatabaseInput) *DatabaseCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateDatabaseInput represents a mutation input for updating databases.
type UpdateDatabaseInput struct {
	OrganizationID *string
	Name           *string
	ClearGeo       bool
	Geo            *string
	Dsn            *string
	ClearToken     bool
	Token          *string
	Status         *enums.DatabaseStatus
	Provider       *enums.DatabaseProvider
	GroupID        *string
}

// Mutate applies the UpdateDatabaseInput on the DatabaseMutation builder.
func (i *UpdateDatabaseInput) Mutate(m *DatabaseMutation) {
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearGeo {
		m.ClearGeo()
	}
	if v := i.Geo; v != nil {
		m.SetGeo(*v)
	}
	if v := i.Dsn; v != nil {
		m.SetDsn(*v)
	}
	if i.ClearToken {
		m.ClearToken()
	}
	if v := i.Token; v != nil {
		m.SetToken(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Provider; v != nil {
		m.SetProvider(*v)
	}
	if v := i.GroupID; v != nil {
		m.SetGroupID(*v)
	}
}

// SetInput applies the change-set in the UpdateDatabaseInput on the DatabaseUpdate builder.
func (c *DatabaseUpdate) SetInput(i UpdateDatabaseInput) *DatabaseUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateDatabaseInput on the DatabaseUpdateOne builder.
func (c *DatabaseUpdateOne) SetInput(i UpdateDatabaseInput) *DatabaseUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateGroupInput represents a mutation input for creating groups.
type CreateGroupInput struct {
	Name            string
	Description     *string
	PrimaryLocation string
	Locations       []string
	Token           *string
	Region          *enums.Region
	DatabaseIDs     []string
}

// Mutate applies the CreateGroupInput on the GroupMutation builder.
func (i *CreateGroupInput) Mutate(m *GroupMutation) {
	m.SetName(i.Name)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	m.SetPrimaryLocation(i.PrimaryLocation)
	if v := i.Locations; v != nil {
		m.SetLocations(v)
	}
	if v := i.Token; v != nil {
		m.SetToken(*v)
	}
	if v := i.Region; v != nil {
		m.SetRegion(*v)
	}
	if v := i.DatabaseIDs; len(v) > 0 {
		m.AddDatabaseIDs(v...)
	}
}

// SetInput applies the change-set in the CreateGroupInput on the GroupCreate builder.
func (c *GroupCreate) SetInput(i CreateGroupInput) *GroupCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateGroupInput represents a mutation input for updating groups.
type UpdateGroupInput struct {
	Name              *string
	ClearDescription  bool
	Description       *string
	PrimaryLocation   *string
	ClearLocations    bool
	Locations         []string
	AppendLocations   []string
	ClearToken        bool
	Token             *string
	Region            *enums.Region
	ClearDatabases    bool
	AddDatabaseIDs    []string
	RemoveDatabaseIDs []string
}

// Mutate applies the UpdateGroupInput on the GroupMutation builder.
func (i *UpdateGroupInput) Mutate(m *GroupMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.PrimaryLocation; v != nil {
		m.SetPrimaryLocation(*v)
	}
	if i.ClearLocations {
		m.ClearLocations()
	}
	if v := i.Locations; v != nil {
		m.SetLocations(v)
	}
	if i.AppendLocations != nil {
		m.AppendLocations(i.Locations)
	}
	if i.ClearToken {
		m.ClearToken()
	}
	if v := i.Token; v != nil {
		m.SetToken(*v)
	}
	if v := i.Region; v != nil {
		m.SetRegion(*v)
	}
	if i.ClearDatabases {
		m.ClearDatabases()
	}
	if v := i.AddDatabaseIDs; len(v) > 0 {
		m.AddDatabaseIDs(v...)
	}
	if v := i.RemoveDatabaseIDs; len(v) > 0 {
		m.RemoveDatabaseIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateGroupInput on the GroupUpdate builder.
func (c *GroupUpdate) SetInput(i UpdateGroupInput) *GroupUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateGroupInput on the GroupUpdateOne builder.
func (c *GroupUpdateOne) SetInput(i UpdateGroupInput) *GroupUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
