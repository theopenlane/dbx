// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/theopenlane/dbx/internal/ent/generated/database"
	"github.com/theopenlane/dbx/internal/ent/generated/group"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (d *DatabaseQuery) CollectFields(ctx context.Context, satisfies ...string) (*DatabaseQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return d, nil
	}
	if err := d.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return d, nil
}

func (d *DatabaseQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(database.Columns))
		selectedFields = []string{database.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "group":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&GroupClient{config: d.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, groupImplementors)...); err != nil {
				return err
			}
			d.withGroup = query
			if _, ok := fieldSeen[database.FieldGroupID]; !ok {
				selectedFields = append(selectedFields, database.FieldGroupID)
				fieldSeen[database.FieldGroupID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[database.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, database.FieldCreatedAt)
				fieldSeen[database.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[database.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, database.FieldUpdatedAt)
				fieldSeen[database.FieldUpdatedAt] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[database.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, database.FieldCreatedBy)
				fieldSeen[database.FieldCreatedBy] = struct{}{}
			}
		case "updatedBy":
			if _, ok := fieldSeen[database.FieldUpdatedBy]; !ok {
				selectedFields = append(selectedFields, database.FieldUpdatedBy)
				fieldSeen[database.FieldUpdatedBy] = struct{}{}
			}
		case "deletedAt":
			if _, ok := fieldSeen[database.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, database.FieldDeletedAt)
				fieldSeen[database.FieldDeletedAt] = struct{}{}
			}
		case "deletedBy":
			if _, ok := fieldSeen[database.FieldDeletedBy]; !ok {
				selectedFields = append(selectedFields, database.FieldDeletedBy)
				fieldSeen[database.FieldDeletedBy] = struct{}{}
			}
		case "organizationID":
			if _, ok := fieldSeen[database.FieldOrganizationID]; !ok {
				selectedFields = append(selectedFields, database.FieldOrganizationID)
				fieldSeen[database.FieldOrganizationID] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[database.FieldName]; !ok {
				selectedFields = append(selectedFields, database.FieldName)
				fieldSeen[database.FieldName] = struct{}{}
			}
		case "geo":
			if _, ok := fieldSeen[database.FieldGeo]; !ok {
				selectedFields = append(selectedFields, database.FieldGeo)
				fieldSeen[database.FieldGeo] = struct{}{}
			}
		case "dsn":
			if _, ok := fieldSeen[database.FieldDsn]; !ok {
				selectedFields = append(selectedFields, database.FieldDsn)
				fieldSeen[database.FieldDsn] = struct{}{}
			}
		case "groupID":
			if _, ok := fieldSeen[database.FieldGroupID]; !ok {
				selectedFields = append(selectedFields, database.FieldGroupID)
				fieldSeen[database.FieldGroupID] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[database.FieldStatus]; !ok {
				selectedFields = append(selectedFields, database.FieldStatus)
				fieldSeen[database.FieldStatus] = struct{}{}
			}
		case "provider":
			if _, ok := fieldSeen[database.FieldProvider]; !ok {
				selectedFields = append(selectedFields, database.FieldProvider)
				fieldSeen[database.FieldProvider] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		d.Select(selectedFields...)
	}
	return nil
}

type databasePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []DatabasePaginateOption
}

func newDatabasePaginateArgs(rv map[string]any) *databasePaginateArgs {
	args := &databasePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*DatabaseWhereInput); ok {
		args.opts = append(args.opts, WithDatabaseFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (gr *GroupQuery) CollectFields(ctx context.Context, satisfies ...string) (*GroupQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return gr, nil
	}
	if err := gr.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return gr, nil
}

func (gr *GroupQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(group.Columns))
		selectedFields = []string{group.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "databases":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&DatabaseClient{config: gr.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, databaseImplementors)...); err != nil {
				return err
			}
			gr.WithNamedDatabases(alias, func(wq *DatabaseQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[group.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, group.FieldCreatedAt)
				fieldSeen[group.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[group.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, group.FieldUpdatedAt)
				fieldSeen[group.FieldUpdatedAt] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[group.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, group.FieldCreatedBy)
				fieldSeen[group.FieldCreatedBy] = struct{}{}
			}
		case "updatedBy":
			if _, ok := fieldSeen[group.FieldUpdatedBy]; !ok {
				selectedFields = append(selectedFields, group.FieldUpdatedBy)
				fieldSeen[group.FieldUpdatedBy] = struct{}{}
			}
		case "deletedAt":
			if _, ok := fieldSeen[group.FieldDeletedAt]; !ok {
				selectedFields = append(selectedFields, group.FieldDeletedAt)
				fieldSeen[group.FieldDeletedAt] = struct{}{}
			}
		case "deletedBy":
			if _, ok := fieldSeen[group.FieldDeletedBy]; !ok {
				selectedFields = append(selectedFields, group.FieldDeletedBy)
				fieldSeen[group.FieldDeletedBy] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[group.FieldName]; !ok {
				selectedFields = append(selectedFields, group.FieldName)
				fieldSeen[group.FieldName] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[group.FieldDescription]; !ok {
				selectedFields = append(selectedFields, group.FieldDescription)
				fieldSeen[group.FieldDescription] = struct{}{}
			}
		case "primaryLocation":
			if _, ok := fieldSeen[group.FieldPrimaryLocation]; !ok {
				selectedFields = append(selectedFields, group.FieldPrimaryLocation)
				fieldSeen[group.FieldPrimaryLocation] = struct{}{}
			}
		case "locations":
			if _, ok := fieldSeen[group.FieldLocations]; !ok {
				selectedFields = append(selectedFields, group.FieldLocations)
				fieldSeen[group.FieldLocations] = struct{}{}
			}
		case "region":
			if _, ok := fieldSeen[group.FieldRegion]; !ok {
				selectedFields = append(selectedFields, group.FieldRegion)
				fieldSeen[group.FieldRegion] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		gr.Select(selectedFields...)
	}
	return nil
}

type groupPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []GroupPaginateOption
}

func newGroupPaginateArgs(rv map[string]any) *groupPaginateArgs {
	args := &groupPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*GroupWhereInput); ok {
		args.opts = append(args.opts, WithGroupFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
