// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/theopenlane/dbx/internal/ent/generated/database"
	"github.com/theopenlane/dbx/internal/ent/generated/group"
	"github.com/theopenlane/dbx/internal/ent/generated/predicate"
	"github.com/theopenlane/dbx/pkg/enums"

	"github.com/theopenlane/dbx/internal/ent/generated/internal"
)

// DatabaseUpdate is the builder for updating Database entities.
type DatabaseUpdate struct {
	config
	hooks    []Hook
	mutation *DatabaseMutation
}

// Where appends a list predicates to the DatabaseUpdate builder.
func (du *DatabaseUpdate) Where(ps ...predicate.Database) *DatabaseUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DatabaseUpdate) SetUpdatedAt(t time.Time) *DatabaseUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (du *DatabaseUpdate) ClearUpdatedAt() *DatabaseUpdate {
	du.mutation.ClearUpdatedAt()
	return du
}

// SetUpdatedBy sets the "updated_by" field.
func (du *DatabaseUpdate) SetUpdatedBy(s string) *DatabaseUpdate {
	du.mutation.SetUpdatedBy(s)
	return du
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (du *DatabaseUpdate) SetNillableUpdatedBy(s *string) *DatabaseUpdate {
	if s != nil {
		du.SetUpdatedBy(*s)
	}
	return du
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (du *DatabaseUpdate) ClearUpdatedBy() *DatabaseUpdate {
	du.mutation.ClearUpdatedBy()
	return du
}

// SetDeletedAt sets the "deleted_at" field.
func (du *DatabaseUpdate) SetDeletedAt(t time.Time) *DatabaseUpdate {
	du.mutation.SetDeletedAt(t)
	return du
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (du *DatabaseUpdate) SetNillableDeletedAt(t *time.Time) *DatabaseUpdate {
	if t != nil {
		du.SetDeletedAt(*t)
	}
	return du
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (du *DatabaseUpdate) ClearDeletedAt() *DatabaseUpdate {
	du.mutation.ClearDeletedAt()
	return du
}

// SetDeletedBy sets the "deleted_by" field.
func (du *DatabaseUpdate) SetDeletedBy(s string) *DatabaseUpdate {
	du.mutation.SetDeletedBy(s)
	return du
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (du *DatabaseUpdate) SetNillableDeletedBy(s *string) *DatabaseUpdate {
	if s != nil {
		du.SetDeletedBy(*s)
	}
	return du
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (du *DatabaseUpdate) ClearDeletedBy() *DatabaseUpdate {
	du.mutation.ClearDeletedBy()
	return du
}

// SetOrganizationID sets the "organization_id" field.
func (du *DatabaseUpdate) SetOrganizationID(s string) *DatabaseUpdate {
	du.mutation.SetOrganizationID(s)
	return du
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (du *DatabaseUpdate) SetNillableOrganizationID(s *string) *DatabaseUpdate {
	if s != nil {
		du.SetOrganizationID(*s)
	}
	return du
}

// SetName sets the "name" field.
func (du *DatabaseUpdate) SetName(s string) *DatabaseUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DatabaseUpdate) SetNillableName(s *string) *DatabaseUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetGeo sets the "geo" field.
func (du *DatabaseUpdate) SetGeo(s string) *DatabaseUpdate {
	du.mutation.SetGeo(s)
	return du
}

// SetNillableGeo sets the "geo" field if the given value is not nil.
func (du *DatabaseUpdate) SetNillableGeo(s *string) *DatabaseUpdate {
	if s != nil {
		du.SetGeo(*s)
	}
	return du
}

// ClearGeo clears the value of the "geo" field.
func (du *DatabaseUpdate) ClearGeo() *DatabaseUpdate {
	du.mutation.ClearGeo()
	return du
}

// SetDsn sets the "dsn" field.
func (du *DatabaseUpdate) SetDsn(s string) *DatabaseUpdate {
	du.mutation.SetDsn(s)
	return du
}

// SetNillableDsn sets the "dsn" field if the given value is not nil.
func (du *DatabaseUpdate) SetNillableDsn(s *string) *DatabaseUpdate {
	if s != nil {
		du.SetDsn(*s)
	}
	return du
}

// SetGroupID sets the "group_id" field.
func (du *DatabaseUpdate) SetGroupID(s string) *DatabaseUpdate {
	du.mutation.SetGroupID(s)
	return du
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (du *DatabaseUpdate) SetNillableGroupID(s *string) *DatabaseUpdate {
	if s != nil {
		du.SetGroupID(*s)
	}
	return du
}

// SetToken sets the "token" field.
func (du *DatabaseUpdate) SetToken(s string) *DatabaseUpdate {
	du.mutation.SetToken(s)
	return du
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (du *DatabaseUpdate) SetNillableToken(s *string) *DatabaseUpdate {
	if s != nil {
		du.SetToken(*s)
	}
	return du
}

// ClearToken clears the value of the "token" field.
func (du *DatabaseUpdate) ClearToken() *DatabaseUpdate {
	du.mutation.ClearToken()
	return du
}

// SetStatus sets the "status" field.
func (du *DatabaseUpdate) SetStatus(es enums.DatabaseStatus) *DatabaseUpdate {
	du.mutation.SetStatus(es)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DatabaseUpdate) SetNillableStatus(es *enums.DatabaseStatus) *DatabaseUpdate {
	if es != nil {
		du.SetStatus(*es)
	}
	return du
}

// SetProvider sets the "provider" field.
func (du *DatabaseUpdate) SetProvider(ep enums.DatabaseProvider) *DatabaseUpdate {
	du.mutation.SetProvider(ep)
	return du
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (du *DatabaseUpdate) SetNillableProvider(ep *enums.DatabaseProvider) *DatabaseUpdate {
	if ep != nil {
		du.SetProvider(*ep)
	}
	return du
}

// SetGroup sets the "group" edge to the Group entity.
func (du *DatabaseUpdate) SetGroup(g *Group) *DatabaseUpdate {
	return du.SetGroupID(g.ID)
}

// Mutation returns the DatabaseMutation object of the builder.
func (du *DatabaseUpdate) Mutation() *DatabaseMutation {
	return du.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (du *DatabaseUpdate) ClearGroup() *DatabaseUpdate {
	du.mutation.ClearGroup()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DatabaseUpdate) Save(ctx context.Context) (int, error) {
	if err := du.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DatabaseUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DatabaseUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DatabaseUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DatabaseUpdate) defaults() error {
	if _, ok := du.mutation.UpdatedAt(); !ok && !du.mutation.UpdatedAtCleared() {
		if database.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized database.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := database.UpdateDefaultUpdatedAt()
		du.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (du *DatabaseUpdate) check() error {
	if v, ok := du.mutation.OrganizationID(); ok {
		if err := database.OrganizationIDValidator(v); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`generated: validator failed for field "Database.organization_id": %w`, err)}
		}
	}
	if v, ok := du.mutation.Name(); ok {
		if err := database.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Database.name": %w`, err)}
		}
	}
	if v, ok := du.mutation.Dsn(); ok {
		if err := database.DsnValidator(v); err != nil {
			return &ValidationError{Name: "dsn", err: fmt.Errorf(`generated: validator failed for field "Database.dsn": %w`, err)}
		}
	}
	if v, ok := du.mutation.Status(); ok {
		if err := database.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Database.status": %w`, err)}
		}
	}
	if v, ok := du.mutation.Provider(); ok {
		if err := database.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`generated: validator failed for field "Database.provider": %w`, err)}
		}
	}
	if du.mutation.GroupCleared() && len(du.mutation.GroupIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Database.group"`)
	}
	return nil
}

func (du *DatabaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(database.Table, database.Columns, sqlgraph.NewFieldSpec(database.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if du.mutation.CreatedAtCleared() {
		_spec.ClearField(database.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(database.FieldUpdatedAt, field.TypeTime, value)
	}
	if du.mutation.UpdatedAtCleared() {
		_spec.ClearField(database.FieldUpdatedAt, field.TypeTime)
	}
	if du.mutation.CreatedByCleared() {
		_spec.ClearField(database.FieldCreatedBy, field.TypeString)
	}
	if value, ok := du.mutation.UpdatedBy(); ok {
		_spec.SetField(database.FieldUpdatedBy, field.TypeString, value)
	}
	if du.mutation.UpdatedByCleared() {
		_spec.ClearField(database.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := du.mutation.DeletedAt(); ok {
		_spec.SetField(database.FieldDeletedAt, field.TypeTime, value)
	}
	if du.mutation.DeletedAtCleared() {
		_spec.ClearField(database.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := du.mutation.DeletedBy(); ok {
		_spec.SetField(database.FieldDeletedBy, field.TypeString, value)
	}
	if du.mutation.DeletedByCleared() {
		_spec.ClearField(database.FieldDeletedBy, field.TypeString)
	}
	if value, ok := du.mutation.OrganizationID(); ok {
		_spec.SetField(database.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(database.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.Geo(); ok {
		_spec.SetField(database.FieldGeo, field.TypeString, value)
	}
	if du.mutation.GeoCleared() {
		_spec.ClearField(database.FieldGeo, field.TypeString)
	}
	if value, ok := du.mutation.Dsn(); ok {
		_spec.SetField(database.FieldDsn, field.TypeString, value)
	}
	if value, ok := du.mutation.Token(); ok {
		_spec.SetField(database.FieldToken, field.TypeString, value)
	}
	if du.mutation.TokenCleared() {
		_spec.ClearField(database.FieldToken, field.TypeString)
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.SetField(database.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := du.mutation.Provider(); ok {
		_spec.SetField(database.FieldProvider, field.TypeEnum, value)
	}
	if du.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   database.GroupTable,
			Columns: []string{database.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = du.schemaConfig.Database
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   database.GroupTable,
			Columns: []string{database.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = du.schemaConfig.Database
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = du.schemaConfig.Database
	ctx = internal.NewSchemaConfigContext(ctx, du.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{database.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DatabaseUpdateOne is the builder for updating a single Database entity.
type DatabaseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DatabaseMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DatabaseUpdateOne) SetUpdatedAt(t time.Time) *DatabaseUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (duo *DatabaseUpdateOne) ClearUpdatedAt() *DatabaseUpdateOne {
	duo.mutation.ClearUpdatedAt()
	return duo
}

// SetUpdatedBy sets the "updated_by" field.
func (duo *DatabaseUpdateOne) SetUpdatedBy(s string) *DatabaseUpdateOne {
	duo.mutation.SetUpdatedBy(s)
	return duo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (duo *DatabaseUpdateOne) SetNillableUpdatedBy(s *string) *DatabaseUpdateOne {
	if s != nil {
		duo.SetUpdatedBy(*s)
	}
	return duo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (duo *DatabaseUpdateOne) ClearUpdatedBy() *DatabaseUpdateOne {
	duo.mutation.ClearUpdatedBy()
	return duo
}

// SetDeletedAt sets the "deleted_at" field.
func (duo *DatabaseUpdateOne) SetDeletedAt(t time.Time) *DatabaseUpdateOne {
	duo.mutation.SetDeletedAt(t)
	return duo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (duo *DatabaseUpdateOne) SetNillableDeletedAt(t *time.Time) *DatabaseUpdateOne {
	if t != nil {
		duo.SetDeletedAt(*t)
	}
	return duo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (duo *DatabaseUpdateOne) ClearDeletedAt() *DatabaseUpdateOne {
	duo.mutation.ClearDeletedAt()
	return duo
}

// SetDeletedBy sets the "deleted_by" field.
func (duo *DatabaseUpdateOne) SetDeletedBy(s string) *DatabaseUpdateOne {
	duo.mutation.SetDeletedBy(s)
	return duo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (duo *DatabaseUpdateOne) SetNillableDeletedBy(s *string) *DatabaseUpdateOne {
	if s != nil {
		duo.SetDeletedBy(*s)
	}
	return duo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (duo *DatabaseUpdateOne) ClearDeletedBy() *DatabaseUpdateOne {
	duo.mutation.ClearDeletedBy()
	return duo
}

// SetOrganizationID sets the "organization_id" field.
func (duo *DatabaseUpdateOne) SetOrganizationID(s string) *DatabaseUpdateOne {
	duo.mutation.SetOrganizationID(s)
	return duo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (duo *DatabaseUpdateOne) SetNillableOrganizationID(s *string) *DatabaseUpdateOne {
	if s != nil {
		duo.SetOrganizationID(*s)
	}
	return duo
}

// SetName sets the "name" field.
func (duo *DatabaseUpdateOne) SetName(s string) *DatabaseUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DatabaseUpdateOne) SetNillableName(s *string) *DatabaseUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetGeo sets the "geo" field.
func (duo *DatabaseUpdateOne) SetGeo(s string) *DatabaseUpdateOne {
	duo.mutation.SetGeo(s)
	return duo
}

// SetNillableGeo sets the "geo" field if the given value is not nil.
func (duo *DatabaseUpdateOne) SetNillableGeo(s *string) *DatabaseUpdateOne {
	if s != nil {
		duo.SetGeo(*s)
	}
	return duo
}

// ClearGeo clears the value of the "geo" field.
func (duo *DatabaseUpdateOne) ClearGeo() *DatabaseUpdateOne {
	duo.mutation.ClearGeo()
	return duo
}

// SetDsn sets the "dsn" field.
func (duo *DatabaseUpdateOne) SetDsn(s string) *DatabaseUpdateOne {
	duo.mutation.SetDsn(s)
	return duo
}

// SetNillableDsn sets the "dsn" field if the given value is not nil.
func (duo *DatabaseUpdateOne) SetNillableDsn(s *string) *DatabaseUpdateOne {
	if s != nil {
		duo.SetDsn(*s)
	}
	return duo
}

// SetGroupID sets the "group_id" field.
func (duo *DatabaseUpdateOne) SetGroupID(s string) *DatabaseUpdateOne {
	duo.mutation.SetGroupID(s)
	return duo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (duo *DatabaseUpdateOne) SetNillableGroupID(s *string) *DatabaseUpdateOne {
	if s != nil {
		duo.SetGroupID(*s)
	}
	return duo
}

// SetToken sets the "token" field.
func (duo *DatabaseUpdateOne) SetToken(s string) *DatabaseUpdateOne {
	duo.mutation.SetToken(s)
	return duo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (duo *DatabaseUpdateOne) SetNillableToken(s *string) *DatabaseUpdateOne {
	if s != nil {
		duo.SetToken(*s)
	}
	return duo
}

// ClearToken clears the value of the "token" field.
func (duo *DatabaseUpdateOne) ClearToken() *DatabaseUpdateOne {
	duo.mutation.ClearToken()
	return duo
}

// SetStatus sets the "status" field.
func (duo *DatabaseUpdateOne) SetStatus(es enums.DatabaseStatus) *DatabaseUpdateOne {
	duo.mutation.SetStatus(es)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DatabaseUpdateOne) SetNillableStatus(es *enums.DatabaseStatus) *DatabaseUpdateOne {
	if es != nil {
		duo.SetStatus(*es)
	}
	return duo
}

// SetProvider sets the "provider" field.
func (duo *DatabaseUpdateOne) SetProvider(ep enums.DatabaseProvider) *DatabaseUpdateOne {
	duo.mutation.SetProvider(ep)
	return duo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (duo *DatabaseUpdateOne) SetNillableProvider(ep *enums.DatabaseProvider) *DatabaseUpdateOne {
	if ep != nil {
		duo.SetProvider(*ep)
	}
	return duo
}

// SetGroup sets the "group" edge to the Group entity.
func (duo *DatabaseUpdateOne) SetGroup(g *Group) *DatabaseUpdateOne {
	return duo.SetGroupID(g.ID)
}

// Mutation returns the DatabaseMutation object of the builder.
func (duo *DatabaseUpdateOne) Mutation() *DatabaseMutation {
	return duo.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (duo *DatabaseUpdateOne) ClearGroup() *DatabaseUpdateOne {
	duo.mutation.ClearGroup()
	return duo
}

// Where appends a list predicates to the DatabaseUpdate builder.
func (duo *DatabaseUpdateOne) Where(ps ...predicate.Database) *DatabaseUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DatabaseUpdateOne) Select(field string, fields ...string) *DatabaseUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Database entity.
func (duo *DatabaseUpdateOne) Save(ctx context.Context) (*Database, error) {
	if err := duo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DatabaseUpdateOne) SaveX(ctx context.Context) *Database {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DatabaseUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DatabaseUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DatabaseUpdateOne) defaults() error {
	if _, ok := duo.mutation.UpdatedAt(); !ok && !duo.mutation.UpdatedAtCleared() {
		if database.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized database.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := database.UpdateDefaultUpdatedAt()
		duo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (duo *DatabaseUpdateOne) check() error {
	if v, ok := duo.mutation.OrganizationID(); ok {
		if err := database.OrganizationIDValidator(v); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`generated: validator failed for field "Database.organization_id": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Name(); ok {
		if err := database.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Database.name": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Dsn(); ok {
		if err := database.DsnValidator(v); err != nil {
			return &ValidationError{Name: "dsn", err: fmt.Errorf(`generated: validator failed for field "Database.dsn": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Status(); ok {
		if err := database.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "Database.status": %w`, err)}
		}
	}
	if v, ok := duo.mutation.Provider(); ok {
		if err := database.ProviderValidator(v); err != nil {
			return &ValidationError{Name: "provider", err: fmt.Errorf(`generated: validator failed for field "Database.provider": %w`, err)}
		}
	}
	if duo.mutation.GroupCleared() && len(duo.mutation.GroupIDs()) > 0 {
		return errors.New(`generated: clearing a required unique edge "Database.group"`)
	}
	return nil
}

func (duo *DatabaseUpdateOne) sqlSave(ctx context.Context) (_node *Database, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(database.Table, database.Columns, sqlgraph.NewFieldSpec(database.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Database.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, database.FieldID)
		for _, f := range fields {
			if !database.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != database.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if duo.mutation.CreatedAtCleared() {
		_spec.ClearField(database.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(database.FieldUpdatedAt, field.TypeTime, value)
	}
	if duo.mutation.UpdatedAtCleared() {
		_spec.ClearField(database.FieldUpdatedAt, field.TypeTime)
	}
	if duo.mutation.CreatedByCleared() {
		_spec.ClearField(database.FieldCreatedBy, field.TypeString)
	}
	if value, ok := duo.mutation.UpdatedBy(); ok {
		_spec.SetField(database.FieldUpdatedBy, field.TypeString, value)
	}
	if duo.mutation.UpdatedByCleared() {
		_spec.ClearField(database.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := duo.mutation.DeletedAt(); ok {
		_spec.SetField(database.FieldDeletedAt, field.TypeTime, value)
	}
	if duo.mutation.DeletedAtCleared() {
		_spec.ClearField(database.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := duo.mutation.DeletedBy(); ok {
		_spec.SetField(database.FieldDeletedBy, field.TypeString, value)
	}
	if duo.mutation.DeletedByCleared() {
		_spec.ClearField(database.FieldDeletedBy, field.TypeString)
	}
	if value, ok := duo.mutation.OrganizationID(); ok {
		_spec.SetField(database.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(database.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Geo(); ok {
		_spec.SetField(database.FieldGeo, field.TypeString, value)
	}
	if duo.mutation.GeoCleared() {
		_spec.ClearField(database.FieldGeo, field.TypeString)
	}
	if value, ok := duo.mutation.Dsn(); ok {
		_spec.SetField(database.FieldDsn, field.TypeString, value)
	}
	if value, ok := duo.mutation.Token(); ok {
		_spec.SetField(database.FieldToken, field.TypeString, value)
	}
	if duo.mutation.TokenCleared() {
		_spec.ClearField(database.FieldToken, field.TypeString)
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.SetField(database.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := duo.mutation.Provider(); ok {
		_spec.SetField(database.FieldProvider, field.TypeEnum, value)
	}
	if duo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   database.GroupTable,
			Columns: []string{database.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = duo.schemaConfig.Database
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   database.GroupTable,
			Columns: []string{database.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = duo.schemaConfig.Database
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = duo.schemaConfig.Database
	ctx = internal.NewSchemaConfigContext(ctx, duo.schemaConfig)
	_node = &Database{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{database.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
